{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst core_1 = require(\"ajv/dist/core\");\nconst codegen_1 = require(\"ajv/dist/compile/codegen\");\nconst ops = codegen_1.operators;\nconst KWDs = {\n  maximum: {\n    exclusive: \"exclusiveMaximum\",\n    ops: [{\n      okStr: \"<=\",\n      ok: ops.LTE,\n      fail: ops.GT\n    }, {\n      okStr: \"<\",\n      ok: ops.LT,\n      fail: ops.GTE\n    }]\n  },\n  minimum: {\n    exclusive: \"exclusiveMinimum\",\n    ops: [{\n      okStr: \">=\",\n      ok: ops.GTE,\n      fail: ops.LT\n    }, {\n      okStr: \">\",\n      ok: ops.GT,\n      fail: ops.LTE\n    }]\n  }\n};\nconst error = {\n  message: cxt => core_1.str`must be ${kwdOp(cxt).okStr} ${cxt.schemaCode}`,\n  params: cxt => core_1._`{comparison: ${kwdOp(cxt).okStr}, limit: ${cxt.schemaCode}}`\n};\nconst def = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      data,\n      schemaCode\n    } = cxt;\n    cxt.fail$data(core_1._`${data} ${kwdOp(cxt).fail} ${schemaCode} || isNaN(${data})`);\n  }\n};\nfunction kwdOp(cxt) {\n  var _a;\n  const keyword = cxt.keyword;\n  const opsIdx = ((_a = cxt.parentSchema) === null || _a === void 0 ? void 0 : _a[KWDs[keyword].exclusive]) ? 1 : 0;\n  return KWDs[keyword].ops[opsIdx];\n}\nexports.default = def;","map":{"version":3,"names":["core_1","require","codegen_1","ops","operators","KWDs","maximum","exclusive","okStr","ok","LTE","fail","GT","LT","GTE","minimum","error","message","cxt","str","kwdOp","schemaCode","params","_","def","keyword","Object","keys","type","schemaType","$data","code","data","fail$data","opsIdx","_a","parentSchema","exports","default"],"sources":["C:\\Users\\ryana\\Desktop\\CPSC 362 PROJECT\\client\\node_modules\\@readme\\openapi-parser\\node_modules\\ajv-draft-04\\src\\vocabulary\\validation\\limitNumber.ts"],"sourcesContent":["import type {\n  CodeKeywordDefinition,\n  ErrorObject,\n  KeywordCxt,\n  KeywordErrorDefinition,\n} from \"ajv/dist/core\"\nimport type {KeywordErrorCxt} from \"ajv/dist/types\"\nimport {_, str, Code} from \"ajv/dist/core\"\nimport {operators} from \"ajv/dist/compile/codegen\"\n\nconst ops = operators\n\nexport type LimitKwd = \"maximum\" | \"minimum\"\n\nexport type ExclusiveLimitKwd = \"exclusiveMaximum\" | \"exclusiveMinimum\"\n\ntype Comparison = \"<=\" | \">=\" | \"<\" | \">\"\n\ninterface KwdOp {\n  okStr: Comparison\n  ok: Code\n  fail: Code\n}\n\ninterface KwdDef {\n  exclusive: ExclusiveLimitKwd\n  ops: [KwdOp, KwdOp]\n}\n\nconst KWDs: {[K in LimitKwd]: KwdDef} = {\n  maximum: {\n    exclusive: \"exclusiveMaximum\",\n    ops: [\n      {okStr: \"<=\", ok: ops.LTE, fail: ops.GT},\n      {okStr: \"<\", ok: ops.LT, fail: ops.GTE},\n    ],\n  },\n  minimum: {\n    exclusive: \"exclusiveMinimum\",\n    ops: [\n      {okStr: \">=\", ok: ops.GTE, fail: ops.LT},\n      {okStr: \">\", ok: ops.GT, fail: ops.LTE},\n    ],\n  },\n}\n\nexport type LimitNumberError = ErrorObject<\n  LimitKwd,\n  {limit: number; comparison: Comparison},\n  number | {$data: string}\n>\n\nconst error: KeywordErrorDefinition = {\n  message: (cxt) => str`must be ${kwdOp(cxt).okStr} ${cxt.schemaCode}`,\n  params: (cxt) => _`{comparison: ${kwdOp(cxt).okStr}, limit: ${cxt.schemaCode}}`,\n}\n\nconst def: CodeKeywordDefinition = {\n  keyword: Object.keys(KWDs),\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt: KeywordCxt) {\n    const {data, schemaCode} = cxt\n    cxt.fail$data(_`${data} ${kwdOp(cxt).fail} ${schemaCode} || isNaN(${data})`)\n  },\n}\n\nfunction kwdOp(cxt: KeywordErrorCxt): KwdOp {\n  const keyword = cxt.keyword as LimitKwd\n  const opsIdx = cxt.parentSchema?.[KWDs[keyword].exclusive] ? 1 : 0\n  return KWDs[keyword].ops[opsIdx]\n}\n\nexport default def\n"],"mappings":";;;;;AAOA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAEA,MAAME,GAAG,GAAGD,SAAA,CAAAE,SAAS;AAmBrB,MAAMC,IAAI,GAA8B;EACtCC,OAAO,EAAE;IACPC,SAAS,EAAE,kBAAkB;IAC7BJ,GAAG,EAAE,CACH;MAACK,KAAK,EAAE,IAAI;MAAEC,EAAE,EAAEN,GAAG,CAACO,GAAG;MAAEC,IAAI,EAAER,GAAG,CAACS;IAAE,CAAC,EACxC;MAACJ,KAAK,EAAE,GAAG;MAAEC,EAAE,EAAEN,GAAG,CAACU,EAAE;MAAEF,IAAI,EAAER,GAAG,CAACW;IAAG,CAAC;GAE1C;EACDC,OAAO,EAAE;IACPR,SAAS,EAAE,kBAAkB;IAC7BJ,GAAG,EAAE,CACH;MAACK,KAAK,EAAE,IAAI;MAAEC,EAAE,EAAEN,GAAG,CAACW,GAAG;MAAEH,IAAI,EAAER,GAAG,CAACU;IAAE,CAAC,EACxC;MAACL,KAAK,EAAE,GAAG;MAAEC,EAAE,EAAEN,GAAG,CAACS,EAAE;MAAED,IAAI,EAAER,GAAG,CAACO;IAAG,CAAC;;CAG5C;AAQD,MAAMM,KAAK,GAA2B;EACpCC,OAAO,EAAGC,GAAG,IAAKlB,MAAA,CAAAmB,GAAG,WAAWC,KAAK,CAACF,GAAG,CAAC,CAACV,KAAK,IAAIU,GAAG,CAACG,UAAU,EAAE;EACpEC,MAAM,EAAGJ,GAAG,IAAKlB,MAAA,CAAAuB,CAAC,gBAAgBH,KAAK,CAACF,GAAG,CAAC,CAACV,KAAK,YAAYU,GAAG,CAACG,UAAU;CAC7E;AAED,MAAMG,GAAG,GAA0B;EACjCC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACtB,IAAI,CAAC;EAC1BuB,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXd,KAAK;EACLe,IAAIA,CAACb,GAAe;IAClB,MAAM;MAACc,IAAI;MAAEX;IAAU,CAAC,GAAGH,GAAG;IAC9BA,GAAG,CAACe,SAAS,CAACjC,MAAA,CAAAuB,CAAC,GAAGS,IAAI,IAAIZ,KAAK,CAACF,GAAG,CAAC,CAACP,IAAI,IAAIU,UAAU,aAAaW,IAAI,GAAG,CAAC;EAC9E;CACD;AAED,SAASZ,KAAKA,CAACF,GAAoB;;EACjC,MAAMO,OAAO,GAAGP,GAAG,CAACO,OAAmB;EACvC,MAAMS,MAAM,GAAG,EAAAC,EAAA,GAAAjB,GAAG,CAACkB,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAG9B,IAAI,CAACoB,OAAO,CAAC,CAAClB,SAAS,CAAC,IAAG,CAAC,GAAG,CAAC;EAClE,OAAOF,IAAI,CAACoB,OAAO,CAAC,CAACtB,GAAG,CAAC+B,MAAM,CAAC;AAClC;AAEAG,OAAA,CAAAC,OAAA,GAAed,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}