{"ast":null,"code":"'use strict';\n\nconst array = [];\nconst charCodeCache = [];\nconst leven = (left, right) => {\n  if (left === right) {\n    return 0;\n  }\n  const swap = left;\n\n  // Swapping the strings if `a` is longer than `b` so we know which one is the\n  // shortest & which one is the longest\n  if (left.length > right.length) {\n    left = right;\n    right = swap;\n  }\n  let leftLength = left.length;\n  let rightLength = right.length;\n\n  // Performing suffix trimming:\n  // We can linearly drop suffix common to both strings since they\n  // don't increase distance at all\n  // Note: `~-` is the bitwise way to perform a `- 1` operation\n  while (leftLength > 0 && left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength)) {\n    leftLength--;\n    rightLength--;\n  }\n\n  // Performing prefix trimming\n  // We can linearly drop prefix common to both strings since they\n  // don't increase distance at all\n  let start = 0;\n  while (start < leftLength && left.charCodeAt(start) === right.charCodeAt(start)) {\n    start++;\n  }\n  leftLength -= start;\n  rightLength -= start;\n  if (leftLength === 0) {\n    return rightLength;\n  }\n  let bCharCode;\n  let result;\n  let temp;\n  let temp2;\n  let i = 0;\n  let j = 0;\n  while (i < leftLength) {\n    charCodeCache[i] = left.charCodeAt(start + i);\n    array[i] = ++i;\n  }\n  while (j < rightLength) {\n    bCharCode = right.charCodeAt(start + j);\n    temp = j++;\n    result = j;\n    for (i = 0; i < leftLength; i++) {\n      temp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;\n      temp = array[i];\n      // eslint-disable-next-line no-multi-assign\n      result = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n    }\n  }\n  return result;\n};\nmodule.exports = leven;\n// TODO: Remove this for the next major release\nmodule.exports.default = leven;","map":{"version":3,"names":["array","charCodeCache","leven","left","right","swap","length","leftLength","rightLength","charCodeAt","start","bCharCode","result","temp","temp2","i","j","module","exports","default"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/leven/index.js"],"sourcesContent":["'use strict';\nconst array = [];\nconst charCodeCache = [];\n\nconst leven = (left, right) => {\n\tif (left === right) {\n\t\treturn 0;\n\t}\n\n\tconst swap = left;\n\n\t// Swapping the strings if `a` is longer than `b` so we know which one is the\n\t// shortest & which one is the longest\n\tif (left.length > right.length) {\n\t\tleft = right;\n\t\tright = swap;\n\t}\n\n\tlet leftLength = left.length;\n\tlet rightLength = right.length;\n\n\t// Performing suffix trimming:\n\t// We can linearly drop suffix common to both strings since they\n\t// don't increase distance at all\n\t// Note: `~-` is the bitwise way to perform a `- 1` operation\n\twhile (leftLength > 0 && (left.charCodeAt(~-leftLength) === right.charCodeAt(~-rightLength))) {\n\t\tleftLength--;\n\t\trightLength--;\n\t}\n\n\t// Performing prefix trimming\n\t// We can linearly drop prefix common to both strings since they\n\t// don't increase distance at all\n\tlet start = 0;\n\n\twhile (start < leftLength && (left.charCodeAt(start) === right.charCodeAt(start))) {\n\t\tstart++;\n\t}\n\n\tleftLength -= start;\n\trightLength -= start;\n\n\tif (leftLength === 0) {\n\t\treturn rightLength;\n\t}\n\n\tlet bCharCode;\n\tlet result;\n\tlet temp;\n\tlet temp2;\n\tlet i = 0;\n\tlet j = 0;\n\n\twhile (i < leftLength) {\n\t\tcharCodeCache[i] = left.charCodeAt(start + i);\n\t\tarray[i] = ++i;\n\t}\n\n\twhile (j < rightLength) {\n\t\tbCharCode = right.charCodeAt(start + j);\n\t\ttemp = j++;\n\t\tresult = j;\n\n\t\tfor (i = 0; i < leftLength; i++) {\n\t\t\ttemp2 = bCharCode === charCodeCache[i] ? temp : temp + 1;\n\t\t\ttemp = array[i];\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tresult = array[i] = temp > result ? temp2 > result ? result + 1 : temp2 : temp2 > temp ? temp + 1 : temp2;\n\t\t}\n\t}\n\n\treturn result;\n};\n\nmodule.exports = leven;\n// TODO: Remove this for the next major release\nmodule.exports.default = leven;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAG,EAAE;AAChB,MAAMC,aAAa,GAAG,EAAE;AAExB,MAAMC,KAAK,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EAC9B,IAAID,IAAI,KAAKC,KAAK,EAAE;IACnB,OAAO,CAAC;EACT;EAEA,MAAMC,IAAI,GAAGF,IAAI;;EAEjB;EACA;EACA,IAAIA,IAAI,CAACG,MAAM,GAAGF,KAAK,CAACE,MAAM,EAAE;IAC/BH,IAAI,GAAGC,KAAK;IACZA,KAAK,GAAGC,IAAI;EACb;EAEA,IAAIE,UAAU,GAAGJ,IAAI,CAACG,MAAM;EAC5B,IAAIE,WAAW,GAAGJ,KAAK,CAACE,MAAM;;EAE9B;EACA;EACA;EACA;EACA,OAAOC,UAAU,GAAG,CAAC,IAAKJ,IAAI,CAACM,UAAU,CAAC,CAAC,CAACF,UAAU,CAAC,KAAKH,KAAK,CAACK,UAAU,CAAC,CAAC,CAACD,WAAW,CAAE,EAAE;IAC7FD,UAAU,EAAE;IACZC,WAAW,EAAE;EACd;;EAEA;EACA;EACA;EACA,IAAIE,KAAK,GAAG,CAAC;EAEb,OAAOA,KAAK,GAAGH,UAAU,IAAKJ,IAAI,CAACM,UAAU,CAACC,KAAK,CAAC,KAAKN,KAAK,CAACK,UAAU,CAACC,KAAK,CAAE,EAAE;IAClFA,KAAK,EAAE;EACR;EAEAH,UAAU,IAAIG,KAAK;EACnBF,WAAW,IAAIE,KAAK;EAEpB,IAAIH,UAAU,KAAK,CAAC,EAAE;IACrB,OAAOC,WAAW;EACnB;EAEA,IAAIG,SAAS;EACb,IAAIC,MAAM;EACV,IAAIC,IAAI;EACR,IAAIC,KAAK;EACT,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,CAAC,GAAG,CAAC;EAET,OAAOD,CAAC,GAAGR,UAAU,EAAE;IACtBN,aAAa,CAACc,CAAC,CAAC,GAAGZ,IAAI,CAACM,UAAU,CAACC,KAAK,GAAGK,CAAC,CAAC;IAC7Cf,KAAK,CAACe,CAAC,CAAC,GAAG,EAAEA,CAAC;EACf;EAEA,OAAOC,CAAC,GAAGR,WAAW,EAAE;IACvBG,SAAS,GAAGP,KAAK,CAACK,UAAU,CAACC,KAAK,GAAGM,CAAC,CAAC;IACvCH,IAAI,GAAGG,CAAC,EAAE;IACVJ,MAAM,GAAGI,CAAC;IAEV,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,UAAU,EAAEQ,CAAC,EAAE,EAAE;MAChCD,KAAK,GAAGH,SAAS,KAAKV,aAAa,CAACc,CAAC,CAAC,GAAGF,IAAI,GAAGA,IAAI,GAAG,CAAC;MACxDA,IAAI,GAAGb,KAAK,CAACe,CAAC,CAAC;MACf;MACAH,MAAM,GAAGZ,KAAK,CAACe,CAAC,CAAC,GAAGF,IAAI,GAAGD,MAAM,GAAGE,KAAK,GAAGF,MAAM,GAAGA,MAAM,GAAG,CAAC,GAAGE,KAAK,GAAGA,KAAK,GAAGD,IAAI,GAAGA,IAAI,GAAG,CAAC,GAAGC,KAAK;IAC1G;EACD;EAEA,OAAOF,MAAM;AACd,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAGhB,KAAK;AACtB;AACAe,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGjB,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}