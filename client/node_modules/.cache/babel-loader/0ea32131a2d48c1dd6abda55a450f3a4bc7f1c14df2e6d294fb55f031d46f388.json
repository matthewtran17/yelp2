{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n}\nfunction isEmptyObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Object.keys(obj).length;\n}\n// Modified from here: https://stackoverflow.com/a/43781499\nfunction stripEmptyObjects(obj) {\n  var cleanObj = obj;\n  if (!isObject(obj) && !Array.isArray(cleanObj)) {\n    return cleanObj;\n  } else if (obj === null) {\n    return undefined;\n  }\n  if (!Array.isArray(cleanObj)) {\n    Object.keys(cleanObj).forEach(function (key) {\n      var value = cleanObj[key];\n      if (typeof value === 'object' && value !== null) {\n        value = stripEmptyObjects(value);\n        if (isEmptyObject(value)) {\n          delete cleanObj[key];\n        } else {\n          cleanObj[key] = value;\n        }\n      } else if (value === null) {\n        // Null properties in an object should remain!\n      }\n    });\n    return cleanObj;\n  }\n  cleanObj.forEach(function (o, idx) {\n    var value = o;\n    if (typeof value === 'object' && value !== null) {\n      value = stripEmptyObjects(value);\n      if (isEmptyObject(value)) {\n        delete cleanObj[idx];\n      } else {\n        cleanObj[idx] = value;\n      }\n    } else if (value === null) {\n      // Null entries within an array should be removed.\n      delete cleanObj[idx];\n    }\n  });\n  // Since deleting a key from an array will retain an undefined value in that array, we need to\n  // filter them out.\n  return cleanObj.filter(function (el) {\n    return el !== undefined;\n  });\n}\nfunction removeUndefinedObjects(obj) {\n  if (obj === undefined) {\n    return undefined;\n  }\n  // JSON.stringify removes undefined values. Though `[undefined]` will be converted with this to\n  // `[null]`, we'll clean that up next.\n  var withoutUndefined = JSON.parse(JSON.stringify(obj));\n  // Then we recursively remove all empty objects and nullish arrays.\n  withoutUndefined = stripEmptyObjects(withoutUndefined);\n  // If the only thing that's leftover is an empty object then return nothing.\n  if (isEmptyObject(withoutUndefined)) return undefined;\n  return withoutUndefined;\n}\nexports.default = removeUndefinedObjects;","map":{"version":3,"names":["Object","defineProperty","exports","value","isObject","obj","Array","isArray","isEmptyObject","keys","length","stripEmptyObjects","cleanObj","undefined","forEach","key","o","idx","filter","el","removeUndefinedObjects","withoutUndefined","JSON","parse","stringify","default"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/oas/node_modules/remove-undefined-objects/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isObject(obj) {\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n}\nfunction isEmptyObject(obj) {\n    return typeof obj === 'object' && obj !== null && !Object.keys(obj).length;\n}\n// Modified from here: https://stackoverflow.com/a/43781499\nfunction stripEmptyObjects(obj) {\n    var cleanObj = obj;\n    if (!isObject(obj) && !Array.isArray(cleanObj)) {\n        return cleanObj;\n    }\n    else if (obj === null) {\n        return undefined;\n    }\n    if (!Array.isArray(cleanObj)) {\n        Object.keys(cleanObj).forEach(function (key) {\n            var value = cleanObj[key];\n            if (typeof value === 'object' && value !== null) {\n                value = stripEmptyObjects(value);\n                if (isEmptyObject(value)) {\n                    delete cleanObj[key];\n                }\n                else {\n                    cleanObj[key] = value;\n                }\n            }\n            else if (value === null) {\n                // Null properties in an object should remain!\n            }\n        });\n        return cleanObj;\n    }\n    cleanObj.forEach(function (o, idx) {\n        var value = o;\n        if (typeof value === 'object' && value !== null) {\n            value = stripEmptyObjects(value);\n            if (isEmptyObject(value)) {\n                delete cleanObj[idx];\n            }\n            else {\n                cleanObj[idx] = value;\n            }\n        }\n        else if (value === null) {\n            // Null entries within an array should be removed.\n            delete cleanObj[idx];\n        }\n    });\n    // Since deleting a key from an array will retain an undefined value in that array, we need to\n    // filter them out.\n    return cleanObj.filter(function (el) { return el !== undefined; });\n}\nfunction removeUndefinedObjects(obj) {\n    if (obj === undefined) {\n        return undefined;\n    }\n    // JSON.stringify removes undefined values. Though `[undefined]` will be converted with this to\n    // `[null]`, we'll clean that up next.\n    var withoutUndefined = JSON.parse(JSON.stringify(obj));\n    // Then we recursively remove all empty objects and nullish arrays.\n    withoutUndefined = stripEmptyObjects(withoutUndefined);\n    // If the only thing that's leftover is an empty object then return nothing.\n    if (isEmptyObject(withoutUndefined))\n        return undefined;\n    return withoutUndefined;\n}\nexports.default = removeUndefinedObjects;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,SAASC,QAAQA,CAACC,GAAG,EAAE;EACnB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC;AACzE;AACA,SAASG,aAAaA,CAACH,GAAG,EAAE;EACxB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI,IAAI,CAACL,MAAM,CAACS,IAAI,CAACJ,GAAG,CAAC,CAACK,MAAM;AAC9E;AACA;AACA,SAASC,iBAAiBA,CAACN,GAAG,EAAE;EAC5B,IAAIO,QAAQ,GAAGP,GAAG;EAClB,IAAI,CAACD,QAAQ,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACK,QAAQ,CAAC,EAAE;IAC5C,OAAOA,QAAQ;EACnB,CAAC,MACI,IAAIP,GAAG,KAAK,IAAI,EAAE;IACnB,OAAOQ,SAAS;EACpB;EACA,IAAI,CAACP,KAAK,CAACC,OAAO,CAACK,QAAQ,CAAC,EAAE;IAC1BZ,MAAM,CAACS,IAAI,CAACG,QAAQ,CAAC,CAACE,OAAO,CAAC,UAAUC,GAAG,EAAE;MACzC,IAAIZ,KAAK,GAAGS,QAAQ,CAACG,GAAG,CAAC;MACzB,IAAI,OAAOZ,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;QAC7CA,KAAK,GAAGQ,iBAAiB,CAACR,KAAK,CAAC;QAChC,IAAIK,aAAa,CAACL,KAAK,CAAC,EAAE;UACtB,OAAOS,QAAQ,CAACG,GAAG,CAAC;QACxB,CAAC,MACI;UACDH,QAAQ,CAACG,GAAG,CAAC,GAAGZ,KAAK;QACzB;MACJ,CAAC,MACI,IAAIA,KAAK,KAAK,IAAI,EAAE;QACrB;MAAA;IAER,CAAC,CAAC;IACF,OAAOS,QAAQ;EACnB;EACAA,QAAQ,CAACE,OAAO,CAAC,UAAUE,CAAC,EAAEC,GAAG,EAAE;IAC/B,IAAId,KAAK,GAAGa,CAAC;IACb,IAAI,OAAOb,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MAC7CA,KAAK,GAAGQ,iBAAiB,CAACR,KAAK,CAAC;MAChC,IAAIK,aAAa,CAACL,KAAK,CAAC,EAAE;QACtB,OAAOS,QAAQ,CAACK,GAAG,CAAC;MACxB,CAAC,MACI;QACDL,QAAQ,CAACK,GAAG,CAAC,GAAGd,KAAK;MACzB;IACJ,CAAC,MACI,IAAIA,KAAK,KAAK,IAAI,EAAE;MACrB;MACA,OAAOS,QAAQ,CAACK,GAAG,CAAC;IACxB;EACJ,CAAC,CAAC;EACF;EACA;EACA,OAAOL,QAAQ,CAACM,MAAM,CAAC,UAAUC,EAAE,EAAE;IAAE,OAAOA,EAAE,KAAKN,SAAS;EAAE,CAAC,CAAC;AACtE;AACA,SAASO,sBAAsBA,CAACf,GAAG,EAAE;EACjC,IAAIA,GAAG,KAAKQ,SAAS,EAAE;IACnB,OAAOA,SAAS;EACpB;EACA;EACA;EACA,IAAIQ,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACnB,GAAG,CAAC,CAAC;EACtD;EACAgB,gBAAgB,GAAGV,iBAAiB,CAACU,gBAAgB,CAAC;EACtD;EACA,IAAIb,aAAa,CAACa,gBAAgB,CAAC,EAC/B,OAAOR,SAAS;EACpB,OAAOQ,gBAAgB;AAC3B;AACAnB,OAAO,CAACuB,OAAO,GAAGL,sBAAsB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}