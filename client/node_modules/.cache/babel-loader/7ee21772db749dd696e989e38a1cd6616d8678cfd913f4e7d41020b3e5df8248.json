{"ast":null,"code":"// eslint-disable-next-line unicorn/import-style\nconst util = require('util');\nconst url = require('@readme/json-schema-ref-parser/lib/util/url');\nexports.format = util.format;\nexports.inherits = util.inherits;\n\n/**\n * Regular Expression that matches Swagger path params.\n */\nexports.swaggerParamRegExp = /\\{([^/}]+)}/g;\n\n/**\n * List of HTTP verbs used for OperationItem as per the Swagger specification\n */\nconst operationsList = ['get', 'post', 'put', 'delete', 'patch', 'options', 'head', 'trace'];\n\n/**\n * This function takes in a Server object, checks if it has relative path\n * and then fixes it as per the path url\n *\n * @param {object} server - The server object to be fixed\n * @param {string} path - The path (an http/https url) from where the file was downloaded\n * @returns {object} - The fixed server object\n */\nfunction fixServers(server, path) {\n  // Server url starting with \"/\" tells that it is not an http(s) url\n  if (server.url && server.url.startsWith('/')) {\n    const inUrl = url.parse(path);\n    const finalUrl = `${inUrl.protocol}//${inUrl.hostname}${server.url}`;\n    server.url = finalUrl; // eslint-disable-line no-param-reassign\n  }\n  return server;\n}\n\n/**\n * This function helps fix the relative servers in the API definition file\n * be at root, path or operation's level\n */\nfunction fixOasRelativeServers(schema, filePath) {\n  if (schema.openapi && filePath && (filePath.startsWith('http:') || filePath.startsWith('https:'))) {\n    /**\n     * From OpenAPI v3 spec for Server object's url property: \"REQUIRED. A URL to the target host.\n     * This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where\n     * the OpenAPI document is being served.\"\n     * Further, the spec says that \"servers\" property can show up at root level, in 'Path Item' object or in 'Operation' object.\n     * However, interpretation of the spec says that relative paths for servers should take into account the hostname that\n     * serves the OpenAPI file.\n     */\n    if (schema.servers) {\n      schema.servers.map(server => fixServers(server, filePath)); // Root level servers array's fixup\n    }\n\n    // Path, Operation, or Webhook level servers array's fixup\n    ['paths', 'webhooks'].forEach(component => {\n      Object.keys(schema[component] || []).forEach(path => {\n        const pathItem = schema[component][path];\n        Object.keys(pathItem).forEach(opItem => {\n          if (opItem === 'servers') {\n            // servers at pathitem level\n            pathItem[opItem].map(server => fixServers(server, filePath));\n          } else if (operationsList.includes(opItem)) {\n            // servers at operation level\n            if (pathItem[opItem].servers) {\n              pathItem[opItem].servers.map(server => fixServers(server, filePath));\n            }\n          }\n        });\n      });\n    });\n  } else {\n    // Do nothing and return\n  }\n}\n\n/**\n * Determine the proper name for the API specification schema used by a given schema.\n *\n * @param {object} schema\n * @returns {string} - The name of the specification that this schema utilizes.\n */\nfunction getSpecificationName(schema) {\n  return schema.swagger ? 'Swagger' : 'OpenAPI';\n}\nexports.fixOasRelativeServers = fixOasRelativeServers;\nexports.getSpecificationName = getSpecificationName;","map":{"version":3,"names":["util","require","url","exports","format","inherits","swaggerParamRegExp","operationsList","fixServers","server","path","startsWith","inUrl","parse","finalUrl","protocol","hostname","fixOasRelativeServers","schema","filePath","openapi","servers","map","forEach","component","Object","keys","pathItem","opItem","includes","getSpecificationName","swagger"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/@readme/openapi-parser/lib/util.js"],"sourcesContent":["// eslint-disable-next-line unicorn/import-style\nconst util = require('util');\n\nconst url = require('@readme/json-schema-ref-parser/lib/util/url');\n\nexports.format = util.format;\nexports.inherits = util.inherits;\n\n/**\n * Regular Expression that matches Swagger path params.\n */\nexports.swaggerParamRegExp = /\\{([^/}]+)}/g;\n\n/**\n * List of HTTP verbs used for OperationItem as per the Swagger specification\n */\nconst operationsList = ['get', 'post', 'put', 'delete', 'patch', 'options', 'head', 'trace'];\n\n/**\n * This function takes in a Server object, checks if it has relative path\n * and then fixes it as per the path url\n *\n * @param {object} server - The server object to be fixed\n * @param {string} path - The path (an http/https url) from where the file was downloaded\n * @returns {object} - The fixed server object\n */\nfunction fixServers(server, path) {\n  // Server url starting with \"/\" tells that it is not an http(s) url\n  if (server.url && server.url.startsWith('/')) {\n    const inUrl = url.parse(path);\n    const finalUrl = `${inUrl.protocol}//${inUrl.hostname}${server.url}`;\n    server.url = finalUrl; // eslint-disable-line no-param-reassign\n  }\n\n  return server;\n}\n\n/**\n * This function helps fix the relative servers in the API definition file\n * be at root, path or operation's level\n */\nfunction fixOasRelativeServers(schema, filePath) {\n  if (schema.openapi && filePath && (filePath.startsWith('http:') || filePath.startsWith('https:'))) {\n    /**\n     * From OpenAPI v3 spec for Server object's url property: \"REQUIRED. A URL to the target host.\n     * This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where\n     * the OpenAPI document is being served.\"\n     * Further, the spec says that \"servers\" property can show up at root level, in 'Path Item' object or in 'Operation' object.\n     * However, interpretation of the spec says that relative paths for servers should take into account the hostname that\n     * serves the OpenAPI file.\n     */\n    if (schema.servers) {\n      schema.servers.map(server => fixServers(server, filePath)); // Root level servers array's fixup\n    }\n\n    // Path, Operation, or Webhook level servers array's fixup\n    ['paths', 'webhooks'].forEach(component => {\n      Object.keys(schema[component] || []).forEach(path => {\n        const pathItem = schema[component][path];\n        Object.keys(pathItem).forEach(opItem => {\n          if (opItem === 'servers') {\n            // servers at pathitem level\n            pathItem[opItem].map(server => fixServers(server, filePath));\n          } else if (operationsList.includes(opItem)) {\n            // servers at operation level\n            if (pathItem[opItem].servers) {\n              pathItem[opItem].servers.map(server => fixServers(server, filePath));\n            }\n          }\n        });\n      });\n    });\n  } else {\n    // Do nothing and return\n  }\n}\n\n/**\n * Determine the proper name for the API specification schema used by a given schema.\n *\n * @param {object} schema\n * @returns {string} - The name of the specification that this schema utilizes.\n */\nfunction getSpecificationName(schema) {\n  return schema.swagger ? 'Swagger' : 'OpenAPI';\n}\n\nexports.fixOasRelativeServers = fixOasRelativeServers;\nexports.getSpecificationName = getSpecificationName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}