{"ast":null,"code":"'use strict';\n\nconst path = require('path');\nconst fs = require('fs');\nconst {\n  promisify\n} = require('util');\nconst pLocate = require('p-locate');\nconst fsStat = promisify(fs.stat);\nconst fsLStat = promisify(fs.lstat);\nconst typeMappings = {\n  directory: 'isDirectory',\n  file: 'isFile'\n};\nfunction checkType({\n  type\n}) {\n  if (type in typeMappings) {\n    return;\n  }\n  throw new Error(`Invalid type specified: ${type}`);\n}\nconst matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();\nmodule.exports = async (paths, options) => {\n  options = {\n    cwd: process.cwd(),\n    type: 'file',\n    allowSymlinks: true,\n    ...options\n  };\n  checkType(options);\n  const statFn = options.allowSymlinks ? fsStat : fsLStat;\n  return pLocate(paths, async path_ => {\n    try {\n      const stat = await statFn(path.resolve(options.cwd, path_));\n      return matchType(options.type, stat);\n    } catch (_) {\n      return false;\n    }\n  }, options);\n};\nmodule.exports.sync = (paths, options) => {\n  options = {\n    cwd: process.cwd(),\n    allowSymlinks: true,\n    type: 'file',\n    ...options\n  };\n  checkType(options);\n  const statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;\n  for (const path_ of paths) {\n    try {\n      const stat = statFn(path.resolve(options.cwd, path_));\n      if (matchType(options.type, stat)) {\n        return path_;\n      }\n    } catch (_) {}\n  }\n};","map":{"version":3,"names":["path","require","fs","promisify","pLocate","fsStat","stat","fsLStat","lstat","typeMappings","directory","file","checkType","type","Error","matchType","undefined","module","exports","paths","options","cwd","process","allowSymlinks","statFn","path_","resolve","_","sync","statSync","lstatSync"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/pkg-dir/node_modules/locate-path/index.js"],"sourcesContent":["'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst {promisify} = require('util');\nconst pLocate = require('p-locate');\n\nconst fsStat = promisify(fs.stat);\nconst fsLStat = promisify(fs.lstat);\n\nconst typeMappings = {\n\tdirectory: 'isDirectory',\n\tfile: 'isFile'\n};\n\nfunction checkType({type}) {\n\tif (type in typeMappings) {\n\t\treturn;\n\t}\n\n\tthrow new Error(`Invalid type specified: ${type}`);\n}\n\nconst matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();\n\nmodule.exports = async (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\ttype: 'file',\n\t\tallowSymlinks: true,\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fsStat : fsLStat;\n\n\treturn pLocate(paths, async path_ => {\n\t\ttry {\n\t\t\tconst stat = await statFn(path.resolve(options.cwd, path_));\n\t\t\treturn matchType(options.type, stat);\n\t\t} catch (_) {\n\t\t\treturn false;\n\t\t}\n\t}, options);\n};\n\nmodule.exports.sync = (paths, options) => {\n\toptions = {\n\t\tcwd: process.cwd(),\n\t\tallowSymlinks: true,\n\t\ttype: 'file',\n\t\t...options\n\t};\n\tcheckType(options);\n\tconst statFn = options.allowSymlinks ? fs.statSync : fs.lstatSync;\n\n\tfor (const path_ of paths) {\n\t\ttry {\n\t\t\tconst stat = statFn(path.resolve(options.cwd, path_));\n\n\t\t\tif (matchType(options.type, stat)) {\n\t\t\t\treturn path_;\n\t\t\t}\n\t\t} catch (_) {\n\t\t}\n\t}\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM;EAACE;AAAS,CAAC,GAAGF,OAAO,CAAC,MAAM,CAAC;AACnC,MAAMG,OAAO,GAAGH,OAAO,CAAC,UAAU,CAAC;AAEnC,MAAMI,MAAM,GAAGF,SAAS,CAACD,EAAE,CAACI,IAAI,CAAC;AACjC,MAAMC,OAAO,GAAGJ,SAAS,CAACD,EAAE,CAACM,KAAK,CAAC;AAEnC,MAAMC,YAAY,GAAG;EACpBC,SAAS,EAAE,aAAa;EACxBC,IAAI,EAAE;AACP,CAAC;AAED,SAASC,SAASA,CAAC;EAACC;AAAI,CAAC,EAAE;EAC1B,IAAIA,IAAI,IAAIJ,YAAY,EAAE;IACzB;EACD;EAEA,MAAM,IAAIK,KAAK,CAAE,2BAA0BD,IAAK,EAAC,CAAC;AACnD;AAEA,MAAME,SAAS,GAAGA,CAACF,IAAI,EAAEP,IAAI,KAAKO,IAAI,KAAKG,SAAS,IAAIV,IAAI,CAACG,YAAY,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;AAElFI,MAAM,CAACC,OAAO,GAAG,OAAOC,KAAK,EAAEC,OAAO,KAAK;EAC1CA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAG,CAAC,CAAC;IAClBR,IAAI,EAAE,MAAM;IACZU,aAAa,EAAE,IAAI;IACnB,GAAGH;EACJ,CAAC;EACDR,SAAS,CAACQ,OAAO,CAAC;EAClB,MAAMI,MAAM,GAAGJ,OAAO,CAACG,aAAa,GAAGlB,MAAM,GAAGE,OAAO;EAEvD,OAAOH,OAAO,CAACe,KAAK,EAAE,MAAMM,KAAK,IAAI;IACpC,IAAI;MACH,MAAMnB,IAAI,GAAG,MAAMkB,MAAM,CAACxB,IAAI,CAAC0B,OAAO,CAACN,OAAO,CAACC,GAAG,EAAEI,KAAK,CAAC,CAAC;MAC3D,OAAOV,SAAS,CAACK,OAAO,CAACP,IAAI,EAAEP,IAAI,CAAC;IACrC,CAAC,CAAC,OAAOqB,CAAC,EAAE;MACX,OAAO,KAAK;IACb;EACD,CAAC,EAAEP,OAAO,CAAC;AACZ,CAAC;AAEDH,MAAM,CAACC,OAAO,CAACU,IAAI,GAAG,CAACT,KAAK,EAAEC,OAAO,KAAK;EACzCA,OAAO,GAAG;IACTC,GAAG,EAAEC,OAAO,CAACD,GAAG,CAAC,CAAC;IAClBE,aAAa,EAAE,IAAI;IACnBV,IAAI,EAAE,MAAM;IACZ,GAAGO;EACJ,CAAC;EACDR,SAAS,CAACQ,OAAO,CAAC;EAClB,MAAMI,MAAM,GAAGJ,OAAO,CAACG,aAAa,GAAGrB,EAAE,CAAC2B,QAAQ,GAAG3B,EAAE,CAAC4B,SAAS;EAEjE,KAAK,MAAML,KAAK,IAAIN,KAAK,EAAE;IAC1B,IAAI;MACH,MAAMb,IAAI,GAAGkB,MAAM,CAACxB,IAAI,CAAC0B,OAAO,CAACN,OAAO,CAACC,GAAG,EAAEI,KAAK,CAAC,CAAC;MAErD,IAAIV,SAAS,CAACK,OAAO,CAACP,IAAI,EAAEP,IAAI,CAAC,EAAE;QAClC,OAAOmB,KAAK;MACb;IACD,CAAC,CAAC,OAAOE,CAAC,EAAE,CACZ;EACD;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}