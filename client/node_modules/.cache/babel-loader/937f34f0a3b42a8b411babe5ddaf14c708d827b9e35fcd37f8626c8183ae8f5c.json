{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ryana\\\\Desktop\\\\CPSC 362 PROJECT - CLEANUP\\\\google-maps-yelp-app-2\\\\client\\\\src\\\\components\\\\SearchAndMap\\\\SearchMap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Button from '@mui/material/Button';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Slider from '@mui/material/Slider';\nimport './SearchMap.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchAndMap = () => {\n  _s();\n  const options = ['bar', 'bank', 'gym', 'restaurant', 'shopping_mall', 'liquor_store', 'cafe', 'church', 'dentist', 'pharmacy', 'night_club'];\n  const prices = [1, 2, 3, 4];\n  const getOptionLabel = option => {\n    // Convert snake_case to Title Case\n    return option.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n  };\n  const getPriceLabel = price => {\n    switch (price) {\n      case 1:\n        return '$';\n      case 2:\n        return '$$';\n      case 3:\n        return '$$$';\n      case 4:\n        return '$$$$';\n      default:\n        return '';\n    }\n  };\n  const [optionVal, setOptionVal] = useState(options[0]);\n  const [priceVal, setOptionPrice] = useState(prices[0]);\n  const [inputValue, setInputValue] = useState('');\n  const [inputPrice, setInputPrice] = useState('');\n  const [nRadius, setRadius] = useState(9600); // Default radius in meters\n  const [clickedLatLng, setClickedLatLng] = useState({\n    lat: 33.88134,\n    lng: -117.8818\n  });\n  const mapRef = useRef(null);\n  const circleRef = useRef(null);\n  useEffect(() => {\n    const loadGoogleMapsScript = () => {\n      const script = document.createElement('script');\n\n      // script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCUnmqTkhklqvM0P2AjfHMVyx7bxBmMwio&libraries=places&callback=initMap`;\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&callback=initMap`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        initMap();\n      };\n      document.head.appendChild(script);\n    };\n    const initMap = () => {\n      if (window.google && window.google.maps && window.google.maps.Map) {\n        const fullerton = {\n          lat: 33.8831307524001,\n          lng: -117.88541077620087\n        };\n        const map = new window.google.maps.Map(document.getElementById('map'), {\n          zoom: 11,\n          center: fullerton\n        });\n        mapRef.current = map;\n        const initCircle = new window.google.maps.Circle({\n          strokeColor: \"#083D77\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#083D77\",\n          fillOpacity: 0.15,\n          map,\n          center: fullerton,\n          radius: nRadius\n        });\n        circleRef.current = initCircle;\n        let infoWindow = new window.google.maps.InfoWindow({\n          content: \"Fullerton\",\n          position: fullerton\n        });\n        infoWindow.open(map);\n        setClickedLatLng(fullerton);\n        function initializeAutocomplete() {\n          var input = document.getElementById('searchTextField');\n          var autocomplete = new window.google.maps.places.Autocomplete(input);\n\n          // Listen for the 'place_changed' event\n          autocomplete.addListener('place_changed', function () {\n            infoWindow.close();\n            var place = autocomplete.getPlace();\n            console.log(\"Autocomplete result: \", place); // Log the details of the selected place\n\n            // Log place.geometry.location for debugging\n            console.log(\"Geometry location: \", place.geometry.location);\n            if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\n              const autoLatLng = {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng()\n              };\n              console.log(\"autoComplete lat/lng: \", autoLatLng);\n              map.panTo(place.geometry.location);\n\n              // Set the clicked LatLng\n              setClickedLatLng(autoLatLng);\n\n              // Set the content of the info window\n              const currLatLng = JSON.stringify(autoLatLng, null, 2);\n              infoWindow = new window.google.maps.InfoWindow({\n                position: currLatLng,\n                center: currLatLng\n              });\n              infoWindow.setContent(currLatLng);\n              initCircle.setCenter(autoLatLng);\n              infoWindow.open(map);\n            } else {\n              console.log(\"No geometry or location found for the selected place, or location is not an instance of google.maps.LatLng.\");\n            }\n          });\n\n          // Add event listener for 'keypress' event to trigger search on 'Enter' key press\n          input.addEventListener('keypress', function (event) {\n            if (event.key === 'Enter') {\n              // Trigger search only if the input field is not empty\n              if (input.value.trim() !== '') {\n                // Simulate a click on the first prediction in the Autocomplete dropdown\n                var firstPrediction = document.querySelector('.pac-container .pac-item');\n                if (firstPrediction) {\n                  firstPrediction.click();\n                }\n              }\n            }\n          });\n        }\n        initializeAutocomplete();\n        map.addListener('click', clickEvent => {\n          infoWindow.close();\n          const lat = clickEvent.latLng.lat();\n          const lng = clickEvent.latLng.lng();\n          const clickedLatLng = {\n            lat,\n            lng\n          };\n          infoWindow = new window.google.maps.InfoWindow({\n            position: clickedLatLng,\n            center: clickedLatLng\n          });\n          console.log(clickEvent);\n          map.panTo(clickEvent.latLng);\n          setClickedLatLng(clickedLatLng);\n          const currLatLng = JSON.stringify(clickEvent.latLng.toJSON(), null, 2);\n          infoWindow.setContent(currLatLng);\n          initCircle.setCenter(clickEvent.latLng);\n          infoWindow.open(map);\n        });\n      } else {\n        console.error('Error: google.maps.Map not defined');\n      }\n    };\n    if (!window.google || !window.google.maps || !window.google.maps.Map) {\n      loadGoogleMapsScript();\n    } else {\n      initMap();\n    }\n  }, []);\n  const handleRadiusChange = (event, value) => {\n    setRadius(value);\n    circleRef.current.setRadius(value);\n  };\n  let markers = [];\n  const [yelpBackendData, setYelpBackendData] = useState([]);\n\n  // useEffect(() => {\n  //     fetch(\"/api\")\n  //     .then(response => response.json())\n  //     .then(data => {\n  //         setYelpBackendData(data);\n  //     })\n  //     .catch(error => {\n  //         console.error('Error fetching data:', error);\n  //     });\n  // }, []);\n\n  async function handleSearch() {\n    console.log(\"handle search\");\n    try {\n      const params = {\n        lat: clickedLatLng.lat,\n        lng: clickedLatLng.lng,\n        term: optionVal,\n        radius: nRadius,\n        price: priceVal\n      };\n\n      // Make a GET request with parameters as query string\n      const queryString = Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');\n      const response = await fetch(`/api?${queryString}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(data);\n      setYelpBackendData(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  useEffect(() => {\n    handleSearch();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"autocomplete-container\",\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        className: \"autoDropdown\",\n        value: optionVal,\n        onChange: (event, newValue) => {\n          setOptionVal(newValue);\n        },\n        inputValue: inputValue,\n        onInputChange: (event, newInputValue) => {\n          setInputValue(newInputValue);\n        },\n        id: \"clear-on-escape\",\n        options: options,\n        getOptionLabel: option => getOptionLabel(option),\n        clearOnEscape: true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n          className: \"inputAutocomplete\",\n          ...params,\n          label: \"search for ... \",\n          variant: \"standard\",\n          InputProps: {\n            ...params.InputProps,\n            disableUnderline: true,\n            autoFocus: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" near \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"searchTextField\",\n        type: \"text\",\n        size: \"50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: \"searchButton\",\n        variant: \"contained\",\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-container\",\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        className: \"autoDropdown paramButton\",\n        value: priceVal,\n        onChange: (event, newPrice) => {\n          setOptionPrice(newPrice);\n        },\n        inputValue: inputPrice,\n        onInputChange: (event, newInputPrice) => {\n          setInputPrice(newInputPrice);\n        },\n        id: \"controllable-states-demo-prices\",\n        options: prices,\n        getOptionLabel: option => getPriceLabel(option),\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n          ...params,\n          label: \"Pricing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 46\n        }, this),\n        sx: {\n          width: '8vw',\n          height: '5vh'\n        },\n        autoComplete: true // Enable autocomplete\n        ,\n        autoHighlight: true // Highlight first option by default\n        ,\n        clearOnEscape: true // Clear input on pressing escape key\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slider-container\",\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        min: 1600 // minimum radius value in meters\n        ,\n        max: 40000 // maximum radius value in meters\n        ,\n        step: 1600 // step size for the slider\n        ,\n        onChange: handleRadiusChange,\n        value: nRadius // Slider value in meters\n        ,\n        valueLabelDisplay: \"on\",\n        valueLabelFormat: value => `${value / 1600} ${value === 1600 ? 'mile' : 'miles'}`,\n        \"aria-labelledby\": \"radius-slider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-side-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 13\n    }, this), yelpBackendData.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 17\n    }, this) : yelpBackendData.businesses.map((business, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Name: \", business.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Rating: \", business.rating]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: business.image_url,\n          alt: business.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 21\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 21\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchAndMap, \"rZq3M29Lu/yjL8mwbDvMn0WT7oA=\");\n_c = SearchAndMap;\nexport default SearchAndMap;\n\n/*\r\nconst handleSearch = async () => {\r\n    // Clear the existing search results and markers\r\n\r\n    console.log(\"Searching for:\", optionVal, \"near lat:\", clickedLatLng.lat, \"lng:\", clickedLatLng.lng, \"within a\", nRadius, \"m radius.\" );\r\n    console.log(\"Price: \", priceVal);\r\n    const service = new window.google.maps.places.PlacesService(mapRef.current);\r\n    let getNextPage;\r\n    const moreButton = document.getElementById(\"more\");\r\n\r\n    moreButton.onclick = function () {\r\n        moreButton.disabled = true;\r\n        if (getNextPage) {\r\n            getNextPage();\r\n        }\r\n    };\r\n\r\n    service.nearbySearch(\r\n        {   location: clickedLatLng, \r\n            radius: nRadius, \r\n            type: optionVal, \r\n            maxprice: priceVal,\r\n        },\r\n        (results, status, pagination) => {\r\n            if (status !== \"OK\" || !results) return;\r\n            console.log(\"search results\")\r\n            // console.log(results)\r\n            results.forEach(place => {  \r\n                const name = place.name;\r\n                const latitude = place.geometry.location.lat();\r\n                const longitude = place.geometry.location.lng();\r\n                const photos = place.photos\r\n                console.log(\"photos : \", photos)\r\n\r\n            \r\n                // console.log(\"establishment name:\", name, \"{\", latitude, \",\", longitude,\"}\");\r\n            });\r\n\r\n            // Alphabetize the results by name\r\n            const sortedResults = results.sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n            });\r\n\r\n            const filteredResults = sortedResults.filter(place => {\r\n                // Check if the first type matches optionVal\r\n                return place.types[0] === optionVal;\r\n            });\r\n\r\n            addPlaces(sortedResults, mapRef.current);\r\n            removePlaces(sortedResults, mapRef.current)\r\n\r\n            moreButton.disabled = !pagination || !pagination.hasNextPage;\r\n            if (pagination && pagination.hasNextPage) {\r\n                getNextPage = () => {\r\n                    // Note: nextPage will call the same handler function as the initial call\r\n                    pagination.nextPage();\r\n                };\r\n            }\r\n        }\r\n    );\r\n\r\n    markers = []\r\n};\r\n\r\nfunction addPlaces(places, map) {\r\n    const placesList = document.getElementById(\"places\");\r\n    placesList.innerHTML = '';\r\n\r\n    for (const place of places) {\r\n        // if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\r\n        const image = {\r\n            url: place.icon,\r\n            size: new window.google.maps.Size(71, 71),\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(17, 34),\r\n            scaledSize: new window.google.maps.Size(25, 25),\r\n        };\r\n\r\n        const markerLatLng = {\r\n            lat: place.geometry.location.lat(),\r\n            lng: place.geometry.location.lng()\r\n        }\r\n\r\n        // console.log(\"searchMarker latLng: \",markerLatLng)\r\n\r\n        const marker = new window.google.maps.Marker({\r\n            map,\r\n            icon: image,\r\n            title: place.name,\r\n            position: markerLatLng,\r\n        });\r\n\r\n        markers.push(marker); // Store the marker in the array\r\n\r\n        const li = document.createElement(\"li\");\r\n\r\n        li.textContent = place.name;\r\n        placesList.appendChild(li);\r\n        li.addEventListener(\"click\", () => {\r\n            map.panTo(place.geometry.location);\r\n            window.google.maps.event.addListenerOnce(map, 'idle', () => {\r\n                map.setZoom(13);\r\n            });\r\n        });\r\n    }\r\n}\r\n    \r\nfunction removePlaces(markers,map) {\r\n    const clearButton = document.getElementById(\"clear\");\r\n    const placesList = document.getElementById(\"places\");\r\n    clearButton.onclick = function() {\r\n        deleteMarkers();\r\n        placesList.innerHTML = '';\r\n    }\r\n\r\n}\r\n\r\nfunction setMapOnAll(map) {\r\n    for (let i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(map);\r\n    }\r\n}\r\n  \r\n// Removes the markers from the map, but keeps them in the array.\r\nfunction hideMarkers() {\r\n    setMapOnAll(null);\r\n}\r\n\r\nfunction deleteMarkers() {\r\n    hideMarkers();\r\n    markers = [];\r\n}\r\n/*\r\n\r\n/*\r\n\r\n        // function initializeAutocomplete() {\r\n        //     var input = document.getElementById('searchTextField');\r\n        //     var autocomplete = new window.google.maps.places.Autocomplete(input);\r\n\r\n        //     // Listen for the 'place_changed' event\r\n        //     autocomplete.addListener('place_changed', function() {\r\n        //         infoWindow.close()\r\n        //         var place = autocomplete.getPlace();\r\n        //         console.log(\"Autocomplete result: \", place); // Log the details of the selected place\r\n            \r\n        //         // Log place.geometry.location for debugging\r\n        //         console.log(\"Geometry location: \", place.geometry.location);\r\n            \r\n        //         if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\r\n        //             const autoLatLng = {\r\n        //                 lat: place.geometry.location.lat(),\r\n        //                 lng: place.geometry.location.lng()\r\n        //             };\r\n        //             console.log(\"autoComplete lat/lng: \", autoLatLng);\r\n        //             map.panTo(place.geometry.location);\r\n\r\n\r\n\r\n*/\nvar _c;\n$RefreshReg$(_c, \"SearchAndMap\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Button","Autocomplete","TextField","Slider","axios","jsxDEV","_jsxDEV","SearchAndMap","_s","options","prices","getOptionLabel","option","split","map","word","charAt","toUpperCase","slice","join","getPriceLabel","price","optionVal","setOptionVal","priceVal","setOptionPrice","inputValue","setInputValue","inputPrice","setInputPrice","nRadius","setRadius","clickedLatLng","setClickedLatLng","lat","lng","mapRef","circleRef","loadGoogleMapsScript","script","document","createElement","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","async","defer","onload","initMap","head","appendChild","window","google","maps","Map","fullerton","getElementById","zoom","center","current","initCircle","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","infoWindow","InfoWindow","content","position","open","initializeAutocomplete","input","autocomplete","places","addListener","close","place","getPlace","console","log","geometry","location","LatLng","autoLatLng","panTo","currLatLng","JSON","stringify","setContent","setCenter","addEventListener","event","key","value","trim","firstPrediction","querySelector","click","clickEvent","latLng","toJSON","error","handleRadiusChange","markers","yelpBackendData","setYelpBackendData","handleSearch","params","term","queryString","Object","keys","encodeURIComponent","response","fetch","ok","Error","data","json","className","children","id","onChange","newValue","onInputChange","newInputValue","clearOnEscape","renderInput","label","variant","InputProps","disableUnderline","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","type","size","onClick","newPrice","newInputPrice","sx","width","height","autoComplete","autoHighlight","min","max","step","valueLabelDisplay","valueLabelFormat","length","businesses","business","i","name","rating","image_url","alt","_c","$RefreshReg$"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT - CLEANUP/google-maps-yelp-app-2/client/src/components/SearchAndMap/SearchMap.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\nimport Slider from '@mui/material/Slider';\r\nimport './SearchMap.css';\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst SearchAndMap = () => {\r\n    const options = [\r\n        'bar', \r\n        'bank', \r\n        'gym', \r\n        'restaurant', \r\n        'shopping_mall', \r\n        'liquor_store', \r\n        'cafe', \r\n        'church',\r\n        'dentist',\r\n        'pharmacy',\r\n        'night_club'\r\n    ];\r\n\r\n    const prices = [\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n    ]   \r\n\r\n    const getOptionLabel = (option) => {\r\n        // Convert snake_case to Title Case\r\n        return option.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\r\n    }\r\n\r\n    const getPriceLabel = (price) => {\r\n        switch (price) {\r\n            case 1:\r\n                return '$';\r\n            case 2:\r\n                return '$$';\r\n            case 3:\r\n                return '$$$';\r\n            case 4:\r\n                return '$$$$';\r\n            default:\r\n                return '';\r\n        }\r\n    };\r\n\r\n    const [optionVal, setOptionVal] = useState(options[0]);\r\n    const [priceVal, setOptionPrice] = useState(prices[0]);\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [inputPrice, setInputPrice] = useState('');\r\n      \r\n    const [nRadius, setRadius] = useState(9600); // Default radius in meters\r\n    const [clickedLatLng, setClickedLatLng] = useState({ lat: 33.88134, lng: -117.8818 });\r\n    const mapRef = useRef(null);\r\n    const circleRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const loadGoogleMapsScript = () => {\r\n            const script = document.createElement('script');\r\n\r\n            // script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyCUnmqTkhklqvM0P2AjfHMVyx7bxBmMwio&libraries=places&callback=initMap`;\r\n            script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=places&callback=initMap`;\r\n\r\n            script.async = true;\r\n            script.defer = true;\r\n\r\n            script.onload = () => {\r\n                initMap();\r\n            };\r\n\r\n            document.head.appendChild(script);\r\n        };\r\n\r\n        const initMap = () => {\r\n            if (window.google && window.google.maps && window.google.maps.Map) {\r\n                const fullerton = { lat: 33.8831307524001, lng: -117.88541077620087 };\r\n                const map = new window.google.maps.Map(document.getElementById('map'), {\r\n                    zoom: 11,\r\n                    center: fullerton,\r\n                });\r\n\r\n                mapRef.current = map;\r\n\r\n                const initCircle = new window.google.maps.Circle({\r\n                    strokeColor: \"#083D77\",\r\n                    strokeOpacity: 0.8,\r\n                    strokeWeight: 2,\r\n                    fillColor: \"#083D77\",\r\n                    fillOpacity: 0.15,\r\n                    map,\r\n                    center: fullerton,\r\n                    radius: nRadius, \r\n                });\r\n\r\n                circleRef.current = initCircle;\r\n\r\n                let infoWindow = new window.google.maps.InfoWindow({\r\n                    content: \"Fullerton\",\r\n                    position: fullerton,\r\n                });\r\n\r\n                infoWindow.open(map);\r\n\r\n                setClickedLatLng(fullerton);\r\n\r\n                function initializeAutocomplete() {\r\n                    var input = document.getElementById('searchTextField');\r\n                    var autocomplete = new window.google.maps.places.Autocomplete(input);\r\n        \r\n                    // Listen for the 'place_changed' event\r\n                    autocomplete.addListener('place_changed', function() {\r\n                        infoWindow.close()\r\n                        var place = autocomplete.getPlace();\r\n                        console.log(\"Autocomplete result: \", place); // Log the details of the selected place\r\n                    \r\n                        // Log place.geometry.location for debugging\r\n                        console.log(\"Geometry location: \", place.geometry.location);\r\n                    \r\n                        if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\r\n                            const autoLatLng = {\r\n                                lat: place.geometry.location.lat(),\r\n                                lng: place.geometry.location.lng()\r\n                            };\r\n                            console.log(\"autoComplete lat/lng: \", autoLatLng);\r\n                            map.panTo(place.geometry.location);\r\n\r\n                            // Set the clicked LatLng\r\n                            setClickedLatLng(autoLatLng);\r\n\r\n                            // Set the content of the info window\r\n                            const currLatLng = JSON.stringify(autoLatLng, null, 2);\r\n\r\n                            infoWindow = new window.google.maps.InfoWindow({\r\n                                position: currLatLng,\r\n                                center: currLatLng,\r\n                            });\r\n\r\n                            infoWindow.setContent(currLatLng);\r\n                            \r\n                            initCircle.setCenter(autoLatLng);\r\n\r\n                            infoWindow.open(map);\r\n                        } else {\r\n                            console.log(\"No geometry or location found for the selected place, or location is not an instance of google.maps.LatLng.\");\r\n                        }\r\n                    });\r\n        \r\n                    // Add event listener for 'keypress' event to trigger search on 'Enter' key press\r\n                    input.addEventListener('keypress', function(event) {\r\n                        if (event.key === 'Enter') {\r\n                            // Trigger search only if the input field is not empty\r\n                            if (input.value.trim() !== '') {\r\n                                // Simulate a click on the first prediction in the Autocomplete dropdown\r\n                                var firstPrediction = document.querySelector('.pac-container .pac-item');\r\n                                if (firstPrediction) {\r\n                                    firstPrediction.click();\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                initializeAutocomplete();\r\n\r\n                map.addListener('click', (clickEvent) => {\r\n                    infoWindow.close();\r\n\r\n                    const lat = clickEvent.latLng.lat();\r\n                    const lng = clickEvent.latLng.lng();\r\n                    const clickedLatLng = { lat, lng };\r\n\r\n                    infoWindow = new window.google.maps.InfoWindow({\r\n                        position: clickedLatLng,\r\n                        center: clickedLatLng,\r\n                    });\r\n\r\n                    console.log(clickEvent)\r\n                    map.panTo(clickEvent.latLng);\r\n                    setClickedLatLng(clickedLatLng);\r\n\r\n                    const currLatLng = JSON.stringify(clickEvent.latLng.toJSON(), null, 2);\r\n                    infoWindow.setContent(currLatLng);\r\n\r\n                    initCircle.setCenter(clickEvent.latLng);\r\n\r\n                    infoWindow.open(map);\r\n                });\r\n            } else {\r\n                console.error('Error: google.maps.Map not defined');\r\n            }\r\n        };\r\n\r\n        if (!window.google || !window.google.maps || !window.google.maps.Map) {\r\n            loadGoogleMapsScript();\r\n        } else {\r\n            initMap();\r\n        }\r\n\r\n    }, []); \r\n\r\n    const handleRadiusChange = (event, value) => {\r\n        setRadius(value); \r\n        circleRef.current.setRadius(value); \r\n    };\r\n\r\n    let markers = [];    \r\n\r\n    const [yelpBackendData, setYelpBackendData] = useState([]);\r\n\r\n    // useEffect(() => {\r\n    //     fetch(\"/api\")\r\n    //     .then(response => response.json())\r\n    //     .then(data => {\r\n    //         setYelpBackendData(data);\r\n    //     })\r\n    //     .catch(error => {\r\n    //         console.error('Error fetching data:', error);\r\n    //     });\r\n    // }, []);\r\n\r\n    async function handleSearch() {\r\n        console.log(\"handle search\");\r\n    \r\n        try {\r\n            const params = {\r\n                lat: clickedLatLng.lat,\r\n                lng: clickedLatLng.lng,\r\n                term: optionVal,\r\n                radius: nRadius,\r\n                price: priceVal\r\n            };\r\n    \r\n            // Make a GET request with parameters as query string\r\n            const queryString = Object.keys(params)\r\n                .map(key => `${key}=${encodeURIComponent(params[key])}`)\r\n                .join('&');\r\n            const response = await fetch(`/api?${queryString}`);\r\n    \r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n    \r\n            const data = await response.json();\r\n            console.log(data)\r\n            setYelpBackendData(data);\r\n        } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        handleSearch();\r\n    }, []);\r\n        \r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <div className='parent-container'>\r\n            <div id=\"autocomplete-container\">\r\n                <Autocomplete className='autoDropdown'\r\n                    value={optionVal}\r\n                    onChange={(event, newValue) => {\r\n                        setOptionVal(newValue);\r\n                    }}\r\n                    inputValue={inputValue}\r\n                    onInputChange={(event, newInputValue) => {\r\n                        setInputValue(newInputValue);\r\n                    }}\r\n                    id=\"clear-on-escape\"\r\n                    options={options}\r\n                    getOptionLabel={(option) => getOptionLabel(option)}\r\n                    clearOnEscape\r\n                    renderInput={(params) => (\r\n                        <TextField className='inputAutocomplete' \r\n                            {...params} \r\n                            label=\"search for ... \" \r\n                            variant=\"standard\" \r\n                            InputProps={{ ...params.InputProps, disableUnderline: true, autoFocus: true }} \r\n                        />\r\n                    )}\r\n                />\r\n                <p> near </p>\r\n                <input id=\"searchTextField\" type=\"text\" size=\"50\"/>\r\n                <Button className=\"searchButton\" variant=\"contained\" onClick={handleSearch}>Search</Button>\r\n            </div>\r\n            <div className='search-container'>\r\n                <Autocomplete className='autoDropdown paramButton'\r\n                    value={priceVal}\r\n                    onChange={(event, newPrice) => {\r\n                        setOptionPrice(newPrice);\r\n                    }}\r\n                    inputValue={inputPrice}\r\n                    onInputChange={(event, newInputPrice)=>{\r\n                        setInputPrice(newInputPrice)\r\n                    }}\r\n                    id=\"controllable-states-demo-prices\"\r\n                    options={prices}\r\n                    getOptionLabel={(option) => getPriceLabel(option)}\r\n                    renderInput={(params) => <TextField {...params} label=\"Pricing\" />}\r\n                    sx={{ width: '8vw', height: '5vh' }}\r\n                    autoComplete={true} // Enable autocomplete\r\n                    autoHighlight={true} // Highlight first option by default\r\n                    clearOnEscape={true} // Clear input on pressing escape key\r\n                />\r\n            </div>\r\n            <div className='slider-container'>\r\n                <Slider\r\n                    min={1600}    // minimum radius value in meters\r\n                    max={40000}   // maximum radius value in meters\r\n                    step={1600}   // step size for the slider\r\n                    onChange={handleRadiusChange}\r\n                    value={nRadius} // Slider value in meters\r\n                    valueLabelDisplay=\"on\"\r\n                    valueLabelFormat={(value) => `${value / 1600} ${value === 1600 ? 'mile' : 'miles'}`}\r\n                    aria-labelledby=\"radius-slider\"\r\n                />\r\n            </div>\r\n            <div className='map-side-container'>\r\n                <div id=\"map\"></div>\r\n                {/* <div id=\"sidebar\">\r\n                    <h2>Results</h2>\r\n                    <ul id=\"places\"></ul>\r\n                    <button id=\"more\">Load more results</button>\r\n                    <button id=\"clear\"> Clear Results </button>\r\n                </div> */}\r\n            </div>\r\n            \r\n\r\n            {yelpBackendData.length === 0 ? ( \r\n                <p>loading...</p>\r\n            ) : (\r\n                yelpBackendData.businesses.map((business, i) => {\r\n                return (\r\n                    <div key={i}>\r\n                    <p>Name: {business.name}</p>\r\n                    <p>Rating: {business.rating}</p>\r\n                    <img src={business.image_url} alt={business.name} />\r\n                    {/* Add more properties as needed */}\r\n                    </div>\r\n                );\r\n                })\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchAndMap;\r\n\r\n\r\n\r\n\r\n/*\r\nconst handleSearch = async () => {\r\n    // Clear the existing search results and markers\r\n\r\n    console.log(\"Searching for:\", optionVal, \"near lat:\", clickedLatLng.lat, \"lng:\", clickedLatLng.lng, \"within a\", nRadius, \"m radius.\" );\r\n    console.log(\"Price: \", priceVal);\r\n    const service = new window.google.maps.places.PlacesService(mapRef.current);\r\n    let getNextPage;\r\n    const moreButton = document.getElementById(\"more\");\r\n\r\n    moreButton.onclick = function () {\r\n        moreButton.disabled = true;\r\n        if (getNextPage) {\r\n            getNextPage();\r\n        }\r\n    };\r\n\r\n    service.nearbySearch(\r\n        {   location: clickedLatLng, \r\n            radius: nRadius, \r\n            type: optionVal, \r\n            maxprice: priceVal,\r\n        },\r\n        (results, status, pagination) => {\r\n            if (status !== \"OK\" || !results) return;\r\n            console.log(\"search results\")\r\n            // console.log(results)\r\n            results.forEach(place => {  \r\n                const name = place.name;\r\n                const latitude = place.geometry.location.lat();\r\n                const longitude = place.geometry.location.lng();\r\n                const photos = place.photos\r\n                console.log(\"photos : \", photos)\r\n\r\n            \r\n                // console.log(\"establishment name:\", name, \"{\", latitude, \",\", longitude,\"}\");\r\n            });\r\n\r\n            // Alphabetize the results by name\r\n            const sortedResults = results.sort((a, b) => {\r\n                return a.name.localeCompare(b.name);\r\n            });\r\n\r\n            const filteredResults = sortedResults.filter(place => {\r\n                // Check if the first type matches optionVal\r\n                return place.types[0] === optionVal;\r\n            });\r\n\r\n            addPlaces(sortedResults, mapRef.current);\r\n            removePlaces(sortedResults, mapRef.current)\r\n\r\n            moreButton.disabled = !pagination || !pagination.hasNextPage;\r\n            if (pagination && pagination.hasNextPage) {\r\n                getNextPage = () => {\r\n                    // Note: nextPage will call the same handler function as the initial call\r\n                    pagination.nextPage();\r\n                };\r\n            }\r\n        }\r\n    );\r\n\r\n    markers = []\r\n};\r\n\r\nfunction addPlaces(places, map) {\r\n    const placesList = document.getElementById(\"places\");\r\n    placesList.innerHTML = '';\r\n\r\n    for (const place of places) {\r\n        // if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\r\n        const image = {\r\n            url: place.icon,\r\n            size: new window.google.maps.Size(71, 71),\r\n            origin: new window.google.maps.Point(0, 0),\r\n            anchor: new window.google.maps.Point(17, 34),\r\n            scaledSize: new window.google.maps.Size(25, 25),\r\n        };\r\n\r\n        const markerLatLng = {\r\n            lat: place.geometry.location.lat(),\r\n            lng: place.geometry.location.lng()\r\n        }\r\n\r\n        // console.log(\"searchMarker latLng: \",markerLatLng)\r\n\r\n        const marker = new window.google.maps.Marker({\r\n            map,\r\n            icon: image,\r\n            title: place.name,\r\n            position: markerLatLng,\r\n        });\r\n\r\n        markers.push(marker); // Store the marker in the array\r\n\r\n        const li = document.createElement(\"li\");\r\n\r\n        li.textContent = place.name;\r\n        placesList.appendChild(li);\r\n        li.addEventListener(\"click\", () => {\r\n            map.panTo(place.geometry.location);\r\n            window.google.maps.event.addListenerOnce(map, 'idle', () => {\r\n                map.setZoom(13);\r\n            });\r\n        });\r\n    }\r\n}\r\n    \r\nfunction removePlaces(markers,map) {\r\n    const clearButton = document.getElementById(\"clear\");\r\n    const placesList = document.getElementById(\"places\");\r\n    clearButton.onclick = function() {\r\n        deleteMarkers();\r\n        placesList.innerHTML = '';\r\n    }\r\n\r\n}\r\n\r\nfunction setMapOnAll(map) {\r\n    for (let i = 0; i < markers.length; i++) {\r\n        markers[i].setMap(map);\r\n    }\r\n}\r\n  \r\n// Removes the markers from the map, but keeps them in the array.\r\nfunction hideMarkers() {\r\n    setMapOnAll(null);\r\n}\r\n\r\nfunction deleteMarkers() {\r\n    hideMarkers();\r\n    markers = [];\r\n}\r\n/*\r\n\r\n/*\r\n\r\n        // function initializeAutocomplete() {\r\n        //     var input = document.getElementById('searchTextField');\r\n        //     var autocomplete = new window.google.maps.places.Autocomplete(input);\r\n\r\n        //     // Listen for the 'place_changed' event\r\n        //     autocomplete.addListener('place_changed', function() {\r\n        //         infoWindow.close()\r\n        //         var place = autocomplete.getPlace();\r\n        //         console.log(\"Autocomplete result: \", place); // Log the details of the selected place\r\n            \r\n        //         // Log place.geometry.location for debugging\r\n        //         console.log(\"Geometry location: \", place.geometry.location);\r\n            \r\n        //         if (place.geometry && place.geometry.location instanceof window.google.maps.LatLng) {\r\n        //             const autoLatLng = {\r\n        //                 lat: place.geometry.location.lat(),\r\n        //                 lng: place.geometry.location.lng()\r\n        //             };\r\n        //             console.log(\"autoComplete lat/lng: \", autoLatLng);\r\n        //             map.panTo(place.geometry.location);\r\n\r\n\r\n\r\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAO,iBAAiB;AAExB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,OAAO,GAAG,CACZ,KAAK,EACL,MAAM,EACN,KAAK,EACL,YAAY,EACZ,eAAe,EACf,cAAc,EACd,MAAM,EACN,QAAQ,EACR,SAAS,EACT,UAAU,EACV,YAAY,CACf;EAED,MAAMC,MAAM,GAAG,CACX,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,CACJ;EAED,MAAMC,cAAc,GAAIC,MAAM,IAAK;IAC/B;IACA,OAAOA,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAChG,CAAC;EAED,MAAMC,aAAa,GAAIC,KAAK,IAAK;IAC7B,QAAQA,KAAK;MACT,KAAK,CAAC;QACF,OAAO,GAAG;MACd,KAAK,CAAC;QACF,OAAO,IAAI;MACf,KAAK,CAAC;QACF,OAAO,KAAK;MAChB,KAAK,CAAC;QACF,OAAO,MAAM;MACjB;QACI,OAAO,EAAE;IACjB;EACJ,CAAC;EAED,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAACY,OAAO,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACe,QAAQ,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAACa,MAAM,CAAC,CAAC,CAAC,CAAC;EAGtD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAC+B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM,CAACiC,OAAO,EAAEC,SAAS,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACmC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpC,QAAQ,CAAC;IAAEqC,GAAG,EAAE,QAAQ;IAAEC,GAAG,EAAE,CAAC;EAAS,CAAC,CAAC;EACrF,MAAMC,MAAM,GAAGrC,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMsC,SAAS,GAAGtC,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMwC,oBAAoB,GAAGA,CAAA,KAAM;MAC/B,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;;MAE/C;MACAF,MAAM,CAACG,GAAG,GAAI,+CAA8CC,OAAO,CAACC,GAAG,CAACC,6BAA8B,oCAAmC;MAEzIN,MAAM,CAACO,KAAK,GAAG,IAAI;MACnBP,MAAM,CAACQ,KAAK,GAAG,IAAI;MAEnBR,MAAM,CAACS,MAAM,GAAG,MAAM;QAClBC,OAAO,CAAC,CAAC;MACb,CAAC;MAEDT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACZ,MAAM,CAAC;IACrC,CAAC;IAED,MAAMU,OAAO,GAAGA,CAAA,KAAM;MAClB,IAAIG,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,IAAI,IAAIF,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,EAAE;QAC/D,MAAMC,SAAS,GAAG;UAAEtB,GAAG,EAAE,gBAAgB;UAAEC,GAAG,EAAE,CAAC;QAAmB,CAAC;QACrE,MAAMrB,GAAG,GAAG,IAAIsC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,CAACf,QAAQ,CAACiB,cAAc,CAAC,KAAK,CAAC,EAAE;UACnEC,IAAI,EAAE,EAAE;UACRC,MAAM,EAAEH;QACZ,CAAC,CAAC;QAEFpB,MAAM,CAACwB,OAAO,GAAG9C,GAAG;QAEpB,MAAM+C,UAAU,GAAG,IAAIT,MAAM,CAACC,MAAM,CAACC,IAAI,CAACQ,MAAM,CAAC;UAC7CC,WAAW,EAAE,SAAS;UACtBC,aAAa,EAAE,GAAG;UAClBC,YAAY,EAAE,CAAC;UACfC,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAE,IAAI;UACjBrD,GAAG;UACH6C,MAAM,EAAEH,SAAS;UACjBY,MAAM,EAAEtC;QACZ,CAAC,CAAC;QAEFO,SAAS,CAACuB,OAAO,GAAGC,UAAU;QAE9B,IAAIQ,UAAU,GAAG,IAAIjB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACgB,UAAU,CAAC;UAC/CC,OAAO,EAAE,WAAW;UACpBC,QAAQ,EAAEhB;QACd,CAAC,CAAC;QAEFa,UAAU,CAACI,IAAI,CAAC3D,GAAG,CAAC;QAEpBmB,gBAAgB,CAACuB,SAAS,CAAC;QAE3B,SAASkB,sBAAsBA,CAAA,EAAG;UAC9B,IAAIC,KAAK,GAAGnC,QAAQ,CAACiB,cAAc,CAAC,iBAAiB,CAAC;UACtD,IAAImB,YAAY,GAAG,IAAIxB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACuB,MAAM,CAAC5E,YAAY,CAAC0E,KAAK,CAAC;;UAEpE;UACAC,YAAY,CAACE,WAAW,CAAC,eAAe,EAAE,YAAW;YACjDT,UAAU,CAACU,KAAK,CAAC,CAAC;YAClB,IAAIC,KAAK,GAAGJ,YAAY,CAACK,QAAQ,CAAC,CAAC;YACnCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEH,KAAK,CAAC,CAAC,CAAC;;YAE7C;YACAE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAAC;YAE3D,IAAIL,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACC,QAAQ,YAAYjC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACgC,MAAM,EAAE;cAChF,MAAMC,UAAU,GAAG;gBACfrD,GAAG,EAAE8C,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAACnD,GAAG,CAAC,CAAC;gBAClCC,GAAG,EAAE6C,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAAClD,GAAG,CAAC;cACrC,CAAC;cACD+C,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEI,UAAU,CAAC;cACjDzE,GAAG,CAAC0E,KAAK,CAACR,KAAK,CAACI,QAAQ,CAACC,QAAQ,CAAC;;cAElC;cACApD,gBAAgB,CAACsD,UAAU,CAAC;;cAE5B;cACA,MAAME,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACJ,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;cAEtDlB,UAAU,GAAG,IAAIjB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACgB,UAAU,CAAC;gBAC3CE,QAAQ,EAAEiB,UAAU;gBACpB9B,MAAM,EAAE8B;cACZ,CAAC,CAAC;cAEFpB,UAAU,CAACuB,UAAU,CAACH,UAAU,CAAC;cAEjC5B,UAAU,CAACgC,SAAS,CAACN,UAAU,CAAC;cAEhClB,UAAU,CAACI,IAAI,CAAC3D,GAAG,CAAC;YACxB,CAAC,MAAM;cACHoE,OAAO,CAACC,GAAG,CAAC,6GAA6G,CAAC;YAC9H;UACJ,CAAC,CAAC;;UAEF;UACAR,KAAK,CAACmB,gBAAgB,CAAC,UAAU,EAAE,UAASC,KAAK,EAAE;YAC/C,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;cACvB;cACA,IAAIrB,KAAK,CAACsB,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC3B;gBACA,IAAIC,eAAe,GAAG3D,QAAQ,CAAC4D,aAAa,CAAC,0BAA0B,CAAC;gBACxE,IAAID,eAAe,EAAE;kBACjBA,eAAe,CAACE,KAAK,CAAC,CAAC;gBAC3B;cACJ;YACJ;UACJ,CAAC,CAAC;QACN;QAEA3B,sBAAsB,CAAC,CAAC;QAExB5D,GAAG,CAACgE,WAAW,CAAC,OAAO,EAAGwB,UAAU,IAAK;UACrCjC,UAAU,CAACU,KAAK,CAAC,CAAC;UAElB,MAAM7C,GAAG,GAAGoE,UAAU,CAACC,MAAM,CAACrE,GAAG,CAAC,CAAC;UACnC,MAAMC,GAAG,GAAGmE,UAAU,CAACC,MAAM,CAACpE,GAAG,CAAC,CAAC;UACnC,MAAMH,aAAa,GAAG;YAAEE,GAAG;YAAEC;UAAI,CAAC;UAElCkC,UAAU,GAAG,IAAIjB,MAAM,CAACC,MAAM,CAACC,IAAI,CAACgB,UAAU,CAAC;YAC3CE,QAAQ,EAAExC,aAAa;YACvB2B,MAAM,EAAE3B;UACZ,CAAC,CAAC;UAEFkD,OAAO,CAACC,GAAG,CAACmB,UAAU,CAAC;UACvBxF,GAAG,CAAC0E,KAAK,CAACc,UAAU,CAACC,MAAM,CAAC;UAC5BtE,gBAAgB,CAACD,aAAa,CAAC;UAE/B,MAAMyD,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACW,UAAU,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;UACtEnC,UAAU,CAACuB,UAAU,CAACH,UAAU,CAAC;UAEjC5B,UAAU,CAACgC,SAAS,CAACS,UAAU,CAACC,MAAM,CAAC;UAEvClC,UAAU,CAACI,IAAI,CAAC3D,GAAG,CAAC;QACxB,CAAC,CAAC;MACN,CAAC,MAAM;QACHoE,OAAO,CAACuB,KAAK,CAAC,oCAAoC,CAAC;MACvD;IACJ,CAAC;IAED,IAAI,CAACrD,MAAM,CAACC,MAAM,IAAI,CAACD,MAAM,CAACC,MAAM,CAACC,IAAI,IAAI,CAACF,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,GAAG,EAAE;MAClEjB,oBAAoB,CAAC,CAAC;IAC1B,CAAC,MAAM;MACHW,OAAO,CAAC,CAAC;IACb;EAEJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMyD,kBAAkB,GAAGA,CAACX,KAAK,EAAEE,KAAK,KAAK;IACzClE,SAAS,CAACkE,KAAK,CAAC;IAChB5D,SAAS,CAACuB,OAAO,CAAC7B,SAAS,CAACkE,KAAK,CAAC;EACtC,CAAC;EAED,IAAIU,OAAO,GAAG,EAAE;EAEhB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGhH,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,eAAeiH,YAAYA,CAAA,EAAG;IAC1B5B,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAE5B,IAAI;MACA,MAAM4B,MAAM,GAAG;QACX7E,GAAG,EAAEF,aAAa,CAACE,GAAG;QACtBC,GAAG,EAAEH,aAAa,CAACG,GAAG;QACtB6E,IAAI,EAAE1F,SAAS;QACf8C,MAAM,EAAEtC,OAAO;QACfT,KAAK,EAAEG;MACX,CAAC;;MAED;MACA,MAAMyF,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,CAClCjG,GAAG,CAACkF,GAAG,IAAK,GAAEA,GAAI,IAAGoB,kBAAkB,CAACL,MAAM,CAACf,GAAG,CAAC,CAAE,EAAC,CAAC,CACvD7E,IAAI,CAAC,GAAG,CAAC;MACd,MAAMkG,QAAQ,GAAG,MAAMC,KAAK,CAAE,QAAOL,WAAY,EAAC,CAAC;MAEnD,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClCxC,OAAO,CAACC,GAAG,CAACsC,IAAI,CAAC;MACjBZ,kBAAkB,CAACY,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACZvB,OAAO,CAACuB,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ;EAEA3G,SAAS,CAAC,MAAM;IACZgH,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAMN,oBACIxG,OAAA;IAAKqH,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC7BtH,OAAA;MAAKuH,EAAE,EAAC,wBAAwB;MAAAD,QAAA,gBAC5BtH,OAAA,CAACL,YAAY;QAAC0H,SAAS,EAAC,cAAc;QAClC1B,KAAK,EAAE3E,SAAU;QACjBwG,QAAQ,EAAEA,CAAC/B,KAAK,EAAEgC,QAAQ,KAAK;UAC3BxG,YAAY,CAACwG,QAAQ,CAAC;QAC1B,CAAE;QACFrG,UAAU,EAAEA,UAAW;QACvBsG,aAAa,EAAEA,CAACjC,KAAK,EAAEkC,aAAa,KAAK;UACrCtG,aAAa,CAACsG,aAAa,CAAC;QAChC,CAAE;QACFJ,EAAE,EAAC,iBAAiB;QACpBpH,OAAO,EAAEA,OAAQ;QACjBE,cAAc,EAAGC,MAAM,IAAKD,cAAc,CAACC,MAAM,CAAE;QACnDsH,aAAa;QACbC,WAAW,EAAGpB,MAAM,iBAChBzG,OAAA,CAACJ,SAAS;UAACyH,SAAS,EAAC,mBAAmB;UAAA,GAChCZ,MAAM;UACVqB,KAAK,EAAC,iBAAiB;UACvBC,OAAO,EAAC,UAAU;UAClBC,UAAU,EAAE;YAAE,GAAGvB,MAAM,CAACuB,UAAU;YAAEC,gBAAgB,EAAE,IAAI;YAAEC,SAAS,EAAE;UAAK;QAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjF;MACH;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACFtI,OAAA;QAAAsH,QAAA,EAAG;MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACbtI,OAAA;QAAOuH,EAAE,EAAC,iBAAiB;QAACgB,IAAI,EAAC,MAAM;QAACC,IAAI,EAAC;MAAI;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC,CAAC,eACnDtI,OAAA,CAACN,MAAM;QAAC2H,SAAS,EAAC,cAAc;QAACU,OAAO,EAAC,WAAW;QAACU,OAAO,EAAEjC,YAAa;QAAAc,QAAA,EAAC;MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1F,CAAC,eACNtI,OAAA;MAAKqH,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC7BtH,OAAA,CAACL,YAAY;QAAC0H,SAAS,EAAC,0BAA0B;QAC9C1B,KAAK,EAAEzE,QAAS;QAChBsG,QAAQ,EAAEA,CAAC/B,KAAK,EAAEiD,QAAQ,KAAK;UAC3BvH,cAAc,CAACuH,QAAQ,CAAC;QAC5B,CAAE;QACFtH,UAAU,EAAEE,UAAW;QACvBoG,aAAa,EAAEA,CAACjC,KAAK,EAAEkD,aAAa,KAAG;UACnCpH,aAAa,CAACoH,aAAa,CAAC;QAChC,CAAE;QACFpB,EAAE,EAAC,iCAAiC;QACpCpH,OAAO,EAAEC,MAAO;QAChBC,cAAc,EAAGC,MAAM,IAAKQ,aAAa,CAACR,MAAM,CAAE;QAClDuH,WAAW,EAAGpB,MAAM,iBAAKzG,OAAA,CAACJ,SAAS;UAAA,GAAK6G,MAAM;UAAEqB,KAAK,EAAC;QAAS;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAE;QACnEM,EAAE,EAAE;UAAEC,KAAK,EAAE,KAAK;UAAEC,MAAM,EAAE;QAAM,CAAE;QACpCC,YAAY,EAAE,IAAK,CAAC;QAAA;QACpBC,aAAa,EAAE,IAAK,CAAC;QAAA;QACrBpB,aAAa,EAAE,IAAK,CAAC;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNtI,OAAA;MAAKqH,SAAS,EAAC,kBAAkB;MAAAC,QAAA,eAC7BtH,OAAA,CAACH,MAAM;QACHoJ,GAAG,EAAE,IAAK,CAAI;QAAA;QACdC,GAAG,EAAE,KAAM,CAAG;QAAA;QACdC,IAAI,EAAE,IAAK,CAAG;QAAA;QACd3B,QAAQ,EAAEpB,kBAAmB;QAC7BT,KAAK,EAAEnE,OAAQ,CAAC;QAAA;QAChB4H,iBAAiB,EAAC,IAAI;QACtBC,gBAAgB,EAAG1D,KAAK,IAAM,GAAEA,KAAK,GAAG,IAAK,IAAGA,KAAK,KAAK,IAAI,GAAG,MAAM,GAAG,OAAQ,EAAE;QACpF,mBAAgB;MAAe;QAAAwC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNtI,OAAA;MAAKqH,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eAC/BtH,OAAA;QAAKuH,EAAE,EAAC;MAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOnB,CAAC,EAGLhC,eAAe,CAACgD,MAAM,KAAK,CAAC,gBACzBtJ,OAAA;MAAAsH,QAAA,EAAG;IAAU;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEjBhC,eAAe,CAACiD,UAAU,CAAC/I,GAAG,CAAC,CAACgJ,QAAQ,EAAEC,CAAC,KAAK;MAChD,oBACIzJ,OAAA;QAAAsH,QAAA,gBACAtH,OAAA;UAAAsH,QAAA,GAAG,QAAM,EAACkC,QAAQ,CAACE,IAAI;QAAA;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5BtI,OAAA;UAAAsH,QAAA,GAAG,UAAQ,EAACkC,QAAQ,CAACG,MAAM;QAAA;UAAAxB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChCtI,OAAA;UAAKoC,GAAG,EAAEoH,QAAQ,CAACI,SAAU;UAACC,GAAG,EAAEL,QAAQ,CAACE;QAAK;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA,GAH1CmB,CAAC;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKN,CAAC;IAEV,CAAC,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIA,CAAC;AAEd,CAAC;AAACpI,EAAA,CA3VID,YAAY;AAAA6J,EAAA,GAAZ7J,YAAY;AA6VlB,eAAeignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}