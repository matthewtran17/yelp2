{"ast":null,"code":"const $RefParserOptions = require('@readme/json-schema-ref-parser/lib/options');\nconst util = require('./util');\nconst schemaValidator = require('./validators/schema');\nconst specValidator = require('./validators/spec');\nmodule.exports = ParserOptions;\n\n/**\n * Options that determine how Swagger APIs are parsed, resolved, dereferenced, and validated.\n *\n * @param {object|ParserOptions} [_options] - Overridden options\n * @class\n * @augments $RefParserOptions\n */\n// eslint-disable-next-line no-unused-vars\nfunction ParserOptions(_options) {\n  $RefParserOptions.call(this, ParserOptions.defaults);\n  $RefParserOptions.apply(this, arguments);\n}\nParserOptions.defaults = {\n  /**\n   * Determines how the API definition will be validated.\n   *\n   * You can add additional validators of your own, replace an existing one with\n   * your own implemenation, or disable any validator by setting it to false.\n   */\n  validate: {\n    colorizeErrors: false,\n    schema: schemaValidator,\n    spec: specValidator\n  }\n};\nutil.inherits(ParserOptions, $RefParserOptions);","map":{"version":3,"names":["$RefParserOptions","require","util","schemaValidator","specValidator","module","exports","ParserOptions","_options","call","defaults","apply","arguments","validate","colorizeErrors","schema","spec","inherits"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/@readme/openapi-parser/lib/options.js"],"sourcesContent":["const $RefParserOptions = require('@readme/json-schema-ref-parser/lib/options');\n\nconst util = require('./util');\nconst schemaValidator = require('./validators/schema');\nconst specValidator = require('./validators/spec');\n\nmodule.exports = ParserOptions;\n\n/**\n * Options that determine how Swagger APIs are parsed, resolved, dereferenced, and validated.\n *\n * @param {object|ParserOptions} [_options] - Overridden options\n * @class\n * @augments $RefParserOptions\n */\n// eslint-disable-next-line no-unused-vars\nfunction ParserOptions(_options) {\n  $RefParserOptions.call(this, ParserOptions.defaults);\n  $RefParserOptions.apply(this, arguments);\n}\n\nParserOptions.defaults = {\n  /**\n   * Determines how the API definition will be validated.\n   *\n   * You can add additional validators of your own, replace an existing one with\n   * your own implemenation, or disable any validator by setting it to false.\n   */\n  validate: {\n    colorizeErrors: false,\n    schema: schemaValidator,\n    spec: specValidator,\n  },\n};\n\nutil.inherits(ParserOptions, $RefParserOptions);\n"],"mappings":"AAAA,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,4CAA4C,CAAC;AAE/E,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC9B,MAAME,eAAe,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACtD,MAAMG,aAAa,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAElDI,MAAM,CAACC,OAAO,GAAGC,aAAa;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAaA,CAACC,QAAQ,EAAE;EAC/BR,iBAAiB,CAACS,IAAI,CAAC,IAAI,EAAEF,aAAa,CAACG,QAAQ,CAAC;EACpDV,iBAAiB,CAACW,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;AAC1C;AAEAL,aAAa,CAACG,QAAQ,GAAG;EACvB;AACF;AACA;AACA;AACA;AACA;EACEG,QAAQ,EAAE;IACRC,cAAc,EAAE,KAAK;IACrBC,MAAM,EAAEZ,eAAe;IACvBa,IAAI,EAAEZ;EACR;AACF,CAAC;AAEDF,IAAI,CAACe,QAAQ,CAACV,aAAa,EAAEP,iBAAiB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}