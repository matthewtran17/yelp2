{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar json_schema_merge_allof_1 = __importDefault(require(\"json-schema-merge-allof\"));\nvar memoizee_1 = __importDefault(require(\"memoizee\"));\nvar utils_1 = require(\"./utils\");\nvar sampleDefaults = function (genericSample) {\n  return function (schema) {\n    return typeof schema.default === typeof genericSample ? schema.default : genericSample;\n  };\n};\nvar primitives = {\n  string: sampleDefaults('string'),\n  string_email: sampleDefaults('user@example.com'),\n  'string_date-time': sampleDefaults(new Date().toISOString()),\n  string_date: sampleDefaults(new Date().toISOString().substring(0, 10)),\n  'string_YYYY-MM-DD': sampleDefaults(new Date().toISOString().substring(0, 10)),\n  string_uuid: sampleDefaults('3fa85f64-5717-4562-b3fc-2c963f66afa6'),\n  string_hostname: sampleDefaults('example.com'),\n  string_ipv4: sampleDefaults('198.51.100.42'),\n  string_ipv6: sampleDefaults('2001:0db8:5b96:0000:0000:426f:8e17:642a'),\n  number: sampleDefaults(0),\n  number_float: sampleDefaults(0.0),\n  integer: sampleDefaults(0),\n  boolean: sampleDefaults(true)\n};\nvar primitive = function (schema) {\n  schema = (0, utils_1.objectify)(schema);\n  var format = schema.format;\n  var type = schema.type;\n  if (type === 'null') {\n    return null;\n  } else if (Array.isArray(type)) {\n    if (type.length === 1) {\n      type = type[0];\n    } else {\n      // If one of our types is `null` then we should generate a sample for the non-null value.\n      if (type.includes('null')) {\n        type = type.filter(function (t) {\n          return t !== 'null';\n        });\n      }\n      type = type.shift();\n    }\n  }\n  // @todo add support for if `type` is an array\n  var fn = primitives[\"\".concat(type, \"_\").concat(format)] || primitives[type];\n  if ((0, utils_1.isFunc)(fn)) {\n    return fn(schema);\n  }\n  return \"Unknown Type: \".concat(schema.type);\n};\n/**\n * Generate a piece of sample data from a JSON Schema object. If `example` declarations are present\n * they will be utilized, but generally this will generate fake data for the information present in\n * the schema.\n *\n * @param schema JSON Schema to generate a sample for.\n */\nfunction sampleFromSchema(schema, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var objectifySchema = (0, utils_1.objectify)(schema);\n  var type = objectifySchema.type;\n  var hasPolymorphism = (0, utils_1.usesPolymorphism)(objectifySchema);\n  if (hasPolymorphism === 'allOf') {\n    try {\n      return sampleFromSchema((0, json_schema_merge_allof_1.default)(objectifySchema, {\n        resolvers: {\n          // Ignore any unrecognized OAS-specific keywords that might be present on the schema\n          // (like `xml`).\n          defaultResolver: json_schema_merge_allof_1.default.options.resolvers.title\n        }\n      }), opts);\n    } catch (error) {\n      return undefined;\n    }\n  } else if (hasPolymorphism) {\n    var samples = objectifySchema[hasPolymorphism].map(function (s) {\n      return sampleFromSchema(s, opts);\n    });\n    if (samples.length === 1) {\n      return samples[0];\n    } else if (samples.some(function (s) {\n      return s === null;\n    })) {\n      // If one of our samples is null then we should try to surface the first non-null one.\n      return samples.find(function (s) {\n        return s !== null;\n      });\n    }\n    // If we still don't have a sample then we should just return whatever the first sample we've\n    // got is. The sample might not be a _full_ example but it should be enough to act as a sample.\n    return samples[0];\n  }\n  var example = objectifySchema.example,\n    additionalProperties = objectifySchema.additionalProperties,\n    properties = objectifySchema.properties,\n    items = objectifySchema.items;\n  var includeReadOnly = opts.includeReadOnly,\n    includeWriteOnly = opts.includeWriteOnly;\n  if (example !== undefined) {\n    return (0, utils_1.deeplyStripKey)(example, '$$ref', function (val) {\n      // do a couple of quick sanity tests to ensure the value\n      // looks like a $$ref that swagger-client generates.\n      return typeof val === 'string' && val.indexOf('#') > -1;\n    });\n  }\n  if (!type) {\n    if (properties || additionalProperties) {\n      type = 'object';\n    } else if (items) {\n      type = 'array';\n    } else {\n      return undefined;\n    }\n  }\n  if (type === 'object' || Array.isArray(type) && type.includes('object')) {\n    var props = (0, utils_1.objectify)(properties);\n    var obj = {};\n    // eslint-disable-next-line no-restricted-syntax\n    for (var name_1 in props) {\n      if (props[name_1] && props[name_1].deprecated) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (props[name_1] && props[name_1].readOnly && !includeReadOnly) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (props[name_1] && props[name_1].writeOnly && !includeWriteOnly) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      obj[name_1] = sampleFromSchema(props[name_1], opts);\n    }\n    if (additionalProperties === true) {\n      obj.additionalProp = {};\n    } else if (additionalProperties) {\n      var additionalProps = (0, utils_1.objectify)(additionalProperties);\n      var additionalPropVal = sampleFromSchema(additionalProps, opts);\n      obj.additionalProp = additionalPropVal;\n    }\n    return obj;\n  }\n  if (type === 'array' || Array.isArray(type) && type.includes('array')) {\n    // `items` should always be present on arrays, but if it isn't we should at least do our best\n    // to support its absence.\n    if (typeof items === 'undefined') {\n      return [];\n    }\n    if (Array.isArray(items.anyOf)) {\n      return items.anyOf.map(function (i) {\n        return sampleFromSchema(i, opts);\n      });\n    }\n    if (Array.isArray(items.oneOf)) {\n      return items.oneOf.map(function (i) {\n        return sampleFromSchema(i, opts);\n      });\n    }\n    return [sampleFromSchema(items, opts)];\n  }\n  if (schema.enum) {\n    if (schema.default) {\n      return schema.default;\n    }\n    return (0, utils_1.normalizeArray)(schema.enum)[0];\n  }\n  if (type === 'file') {\n    return undefined;\n  }\n  return primitive(schema);\n}\nexports.default = (0, memoizee_1.default)(sampleFromSchema);","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","json_schema_merge_allof_1","require","memoizee_1","utils_1","sampleDefaults","genericSample","schema","default","primitives","string","string_email","Date","toISOString","string_date","substring","string_uuid","string_hostname","string_ipv4","string_ipv6","number","number_float","integer","boolean","primitive","objectify","format","type","Array","isArray","length","includes","filter","t","shift","fn","concat","isFunc","sampleFromSchema","opts","objectifySchema","hasPolymorphism","usesPolymorphism","resolvers","defaultResolver","options","title","error","undefined","samples","map","s","some","find","example","additionalProperties","properties","items","includeReadOnly","includeWriteOnly","deeplyStripKey","val","indexOf","props","obj","name_1","deprecated","readOnly","writeOnly","additionalProp","additionalProps","additionalPropVal","anyOf","i","oneOf","enum","normalizeArray"],"sources":["C:/Users/ryana/Desktop/CPSC 362 PROJECT/client/node_modules/oas/dist/samples/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar json_schema_merge_allof_1 = __importDefault(require(\"json-schema-merge-allof\"));\nvar memoizee_1 = __importDefault(require(\"memoizee\"));\nvar utils_1 = require(\"./utils\");\nvar sampleDefaults = function (genericSample) {\n    return function (schema) {\n        return typeof schema.default === typeof genericSample ? schema.default : genericSample;\n    };\n};\nvar primitives = {\n    string: sampleDefaults('string'),\n    string_email: sampleDefaults('user@example.com'),\n    'string_date-time': sampleDefaults(new Date().toISOString()),\n    string_date: sampleDefaults(new Date().toISOString().substring(0, 10)),\n    'string_YYYY-MM-DD': sampleDefaults(new Date().toISOString().substring(0, 10)),\n    string_uuid: sampleDefaults('3fa85f64-5717-4562-b3fc-2c963f66afa6'),\n    string_hostname: sampleDefaults('example.com'),\n    string_ipv4: sampleDefaults('198.51.100.42'),\n    string_ipv6: sampleDefaults('2001:0db8:5b96:0000:0000:426f:8e17:642a'),\n    number: sampleDefaults(0),\n    number_float: sampleDefaults(0.0),\n    integer: sampleDefaults(0),\n    boolean: sampleDefaults(true),\n};\nvar primitive = function (schema) {\n    schema = (0, utils_1.objectify)(schema);\n    var format = schema.format;\n    var type = schema.type;\n    if (type === 'null') {\n        return null;\n    }\n    else if (Array.isArray(type)) {\n        if (type.length === 1) {\n            type = type[0];\n        }\n        else {\n            // If one of our types is `null` then we should generate a sample for the non-null value.\n            if (type.includes('null')) {\n                type = type.filter(function (t) { return t !== 'null'; });\n            }\n            type = type.shift();\n        }\n    }\n    // @todo add support for if `type` is an array\n    var fn = primitives[\"\".concat(type, \"_\").concat(format)] || primitives[type];\n    if ((0, utils_1.isFunc)(fn)) {\n        return fn(schema);\n    }\n    return \"Unknown Type: \".concat(schema.type);\n};\n/**\n * Generate a piece of sample data from a JSON Schema object. If `example` declarations are present\n * they will be utilized, but generally this will generate fake data for the information present in\n * the schema.\n *\n * @param schema JSON Schema to generate a sample for.\n */\nfunction sampleFromSchema(schema, opts) {\n    if (opts === void 0) { opts = {}; }\n    var objectifySchema = (0, utils_1.objectify)(schema);\n    var type = objectifySchema.type;\n    var hasPolymorphism = (0, utils_1.usesPolymorphism)(objectifySchema);\n    if (hasPolymorphism === 'allOf') {\n        try {\n            return sampleFromSchema((0, json_schema_merge_allof_1.default)(objectifySchema, {\n                resolvers: {\n                    // Ignore any unrecognized OAS-specific keywords that might be present on the schema\n                    // (like `xml`).\n                    defaultResolver: json_schema_merge_allof_1.default.options.resolvers.title,\n                },\n            }), opts);\n        }\n        catch (error) {\n            return undefined;\n        }\n    }\n    else if (hasPolymorphism) {\n        var samples = objectifySchema[hasPolymorphism].map(function (s) {\n            return sampleFromSchema(s, opts);\n        });\n        if (samples.length === 1) {\n            return samples[0];\n        }\n        else if (samples.some(function (s) { return s === null; })) {\n            // If one of our samples is null then we should try to surface the first non-null one.\n            return samples.find(function (s) { return s !== null; });\n        }\n        // If we still don't have a sample then we should just return whatever the first sample we've\n        // got is. The sample might not be a _full_ example but it should be enough to act as a sample.\n        return samples[0];\n    }\n    var example = objectifySchema.example, additionalProperties = objectifySchema.additionalProperties, properties = objectifySchema.properties, items = objectifySchema.items;\n    var includeReadOnly = opts.includeReadOnly, includeWriteOnly = opts.includeWriteOnly;\n    if (example !== undefined) {\n        return (0, utils_1.deeplyStripKey)(example, '$$ref', function (val) {\n            // do a couple of quick sanity tests to ensure the value\n            // looks like a $$ref that swagger-client generates.\n            return typeof val === 'string' && val.indexOf('#') > -1;\n        });\n    }\n    if (!type) {\n        if (properties || additionalProperties) {\n            type = 'object';\n        }\n        else if (items) {\n            type = 'array';\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (type === 'object' || (Array.isArray(type) && type.includes('object'))) {\n        var props = (0, utils_1.objectify)(properties);\n        var obj = {};\n        // eslint-disable-next-line no-restricted-syntax\n        for (var name_1 in props) {\n            if (props[name_1] && props[name_1].deprecated) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (props[name_1] && props[name_1].readOnly && !includeReadOnly) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (props[name_1] && props[name_1].writeOnly && !includeWriteOnly) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            obj[name_1] = sampleFromSchema(props[name_1], opts);\n        }\n        if (additionalProperties === true) {\n            obj.additionalProp = {};\n        }\n        else if (additionalProperties) {\n            var additionalProps = (0, utils_1.objectify)(additionalProperties);\n            var additionalPropVal = sampleFromSchema(additionalProps, opts);\n            obj.additionalProp = additionalPropVal;\n        }\n        return obj;\n    }\n    if (type === 'array' || (Array.isArray(type) && type.includes('array'))) {\n        // `items` should always be present on arrays, but if it isn't we should at least do our best\n        // to support its absence.\n        if (typeof items === 'undefined') {\n            return [];\n        }\n        if (Array.isArray(items.anyOf)) {\n            return items.anyOf.map(function (i) { return sampleFromSchema(i, opts); });\n        }\n        if (Array.isArray(items.oneOf)) {\n            return items.oneOf.map(function (i) { return sampleFromSchema(i, opts); });\n        }\n        return [sampleFromSchema(items, opts)];\n    }\n    if (schema.enum) {\n        if (schema.default) {\n            return schema.default;\n        }\n        return (0, utils_1.normalizeArray)(schema.enum)[0];\n    }\n    if (type === 'file') {\n        return undefined;\n    }\n    return primitive(schema);\n}\nexports.default = (0, memoizee_1.default)(sampleFromSchema);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}